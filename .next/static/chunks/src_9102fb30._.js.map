{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,6LAAC,uMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tooltip.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = ({ delayDuration = 300, ...props }) => (\n  <TooltipPrimitive.Provider delayDuration={delayDuration} {...props} />\n);\nTooltipProvider.displayName = TooltipPrimitive.Provider.displayName;\n\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AAEA;AALA;;;;;AAOA,MAAM,kBAAkB,CAAC,EAAE,gBAAgB,GAAG,EAAE,GAAG,OAAO,iBACxD,6LAAC,sKAAA,CAAA,WAAyB;QAAC,eAAe;QAAgB,GAAG,KAAK;;;;;;KAD9D;AAGN,gBAAgB,WAAW,GAAG,sKAAA,CAAA,WAAyB,CAAC,WAAW;AAGnE,MAAM,UAAU,sKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,sKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGpC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,6LAAC,sKAAA,CAAA,UAAwB;QACvB,KAAK;QACL,YAAY;QACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sYACA;QAED,GAAG,KAAK;;;;;;;AAGb,eAAe,WAAW,GAAG,sKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/site-settings/telegram/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bot, Loader2, Send, MessageSquare, ShoppingCart, UserPlus, DollarSign, ShieldAlert, HelpCircle, KeyRound } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { SiteTelegramSettings, AdminTelegramNotificationPrefs } from '@/types';\nimport { Separator } from '@/components/ui/separator';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\n\nconst telegramSettingsSchema = z.object({\n  client_bot_token: z.string().optional().nullable(),\n  client_bot_chat_id: z.string().optional().nullable(),\n  admin_bot_token: z.string().optional().nullable(),\n  admin_bot_chat_ids: z.string().optional().nullable(), // Comma-separated\n  key_bot_token: z.string().optional().nullable(),\n  key_bot_admin_chat_ids: z.string().optional().nullable(),\n});\n\nconst adminNotificationPrefsSchema = z.object({\n  notify_admin_on_balance_deposit: z.boolean().default(false),\n  notify_admin_on_product_purchase: z.boolean().default(false),\n  notify_admin_on_promo_code_creation: z.boolean().default(false),\n  notify_admin_on_admin_login: z.boolean().default(false),\n  notify_admin_on_key_activation_request: z.boolean().default(true), // Default to true for new setting\n});\n\ntype CombinedFormValues = z.infer<typeof telegramSettingsSchema> & z.infer<typeof adminNotificationPrefsSchema>;\n\ninterface AdminNotificationOption {\n  id: keyof AdminTelegramNotificationPrefs;\n  label: string;\n  description: string;\n  icon: React.ElementType;\n  implemented: boolean; // To control if it's selectable\n}\n\nconst adminNotificationOptions: AdminNotificationOption[] = [\n  { id: 'notify_admin_on_balance_deposit', label: 'Пополнение баланса', description: 'Уведомлять о пополнении баланса пользователем (включая промокоды).', icon: DollarSign, implemented: true },\n  { id: 'notify_admin_on_product_purchase', label: 'Покупка товара', description: 'Уведомлять о покупке товара пользователем.', icon: ShoppingCart, implemented: true },\n  { id: 'notify_admin_on_promo_code_creation', label: 'Создание промокода', description: 'Уведомлять о создании нового промокода.', icon: MessageSquare, implemented: true },\n  { id: 'notify_admin_on_key_activation_request', label: 'Запрос активации ключа', description: 'Уведомлять о новом запросе на активацию ключа через Key Bot.', icon: KeyRound, implemented: true },\n  { id: 'notify_admin_on_admin_login', label: 'Вход в админ-панель', description: 'Уведомлять о входе в админ-панель. (Требуется доп. интеграция)', icon: ShieldAlert, implemented: false },\n];\n\n\nexport default function AdminTelegramSettingsPage() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const [testMessageClient, setTestMessageClient] = useState('');\n  const [testMessageAdmin, setTestMessageAdmin] = useState('');\n  const [testMessageKeyBot, setTestMessageKeyBot] = useState('');\n  const [isSendingTestClient, setIsSendingTestClient] = useState(false);\n  const [isSendingTestAdmin, setIsSendingTestAdmin] = useState(false);\n  const [isSendingTestKeyBot, setIsSendingTestKeyBot] = useState(false);\n\n\n  const form = useForm<CombinedFormValues>({\n    resolver: zodResolver(telegramSettingsSchema.merge(adminNotificationPrefsSchema)),\n    defaultValues: {\n      client_bot_token: '',\n      client_bot_chat_id: '',\n      admin_bot_token: '',\n      admin_bot_chat_ids: '',\n      key_bot_token: '',\n      key_bot_admin_chat_ids: '',\n      notify_admin_on_balance_deposit: false,\n      notify_admin_on_product_purchase: false,\n      notify_admin_on_promo_code_creation: false,\n      notify_admin_on_admin_login: false,\n      notify_admin_on_key_activation_request: true,\n    },\n  });\n\n  const fetchTelegramSettings = useCallback(async () => {\n    setIsFetching(true);\n    try {\n      const response = await fetch('/api/admin/site-settings/telegram');\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Failed to fetch Telegram settings' }));\n        throw new Error(errorData.message || 'Failed to fetch Telegram settings');\n      }\n      const data: {telegramSettings: SiteTelegramSettings, notificationPrefs: AdminTelegramNotificationPrefs} = await response.json();\n      form.reset({\n        client_bot_token: data.telegramSettings?.client_bot_token || '',\n        client_bot_chat_id: data.telegramSettings?.client_bot_chat_id || '',\n        admin_bot_token: data.telegramSettings?.admin_bot_token || '',\n        admin_bot_chat_ids: data.telegramSettings?.admin_bot_chat_ids || '',\n        key_bot_token: data.telegramSettings?.key_bot_token || '',\n        key_bot_admin_chat_ids: data.telegramSettings?.key_bot_admin_chat_ids || '',\n        notify_admin_on_balance_deposit: data.notificationPrefs?.notify_admin_on_balance_deposit || false,\n        notify_admin_on_product_purchase: data.notificationPrefs?.notify_admin_on_product_purchase || false,\n        notify_admin_on_promo_code_creation: data.notificationPrefs?.notify_admin_on_promo_code_creation || false,\n        notify_admin_on_admin_login: data.notificationPrefs?.notify_admin_on_admin_login || false,\n        notify_admin_on_key_activation_request: data.notificationPrefs?.notify_admin_on_key_activation_request === undefined ? true : data.notificationPrefs.notify_admin_on_key_activation_request,\n      });\n    } catch (error: any) {\n      toast({ title: \"Ошибка загрузки Telegram настроек\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setIsFetching(false);\n    }\n  }, [form, toast]);\n\n  useEffect(() => {\n    fetchTelegramSettings();\n  }, [fetchTelegramSettings]);\n\n  const onSubmit = async (data: CombinedFormValues) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/admin/site-settings/telegram', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      const result = await response.json();\n      if (!response.ok) throw new Error(result.message || 'Не удалось сохранить Telegram настройки.');\n      toast({ title: \"Telegram Настройки сохранены\", description: \"Конфигурация Telegram ботов успешно обновлена.\" });\n      if(result.settings) {\n          form.reset({\n            client_bot_token: result.settings.telegramSettings?.client_bot_token || '',\n            client_bot_chat_id: result.settings.telegramSettings?.client_bot_chat_id || '',\n            admin_bot_token: result.settings.telegramSettings?.admin_bot_token || '',\n            admin_bot_chat_ids: result.settings.telegramSettings?.admin_bot_chat_ids || '',\n            key_bot_token: result.settings.telegramSettings?.key_bot_token || '',\n            key_bot_admin_chat_ids: result.settings.telegramSettings?.key_bot_admin_chat_ids || '',\n            notify_admin_on_balance_deposit: result.settings.notificationPrefs?.notify_admin_on_balance_deposit || false,\n            notify_admin_on_product_purchase: result.settings.notificationPrefs?.notify_admin_on_product_purchase || false,\n            notify_admin_on_promo_code_creation: result.settings.notificationPrefs?.notify_admin_on_promo_code_creation || false,\n            notify_admin_on_admin_login: result.settings.notificationPrefs?.notify_admin_on_admin_login || false,\n            notify_admin_on_key_activation_request: result.settings.notificationPrefs?.notify_admin_on_key_activation_request === undefined ? true : result.settings.notificationPrefs.notify_admin_on_key_activation_request,\n        });\n      }\n    } catch (error: any) {\n      toast({ title: \"Ошибка сохранения Telegram\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendTest = async (botType: 'client' | 'admin' | 'key', message: string) => {\n    if (!message.trim()) {\n        toast({ title: \"Ошибка\", description: \"Введите текст сообщения.\", variant: \"destructive\"});\n        return;\n    }\n    let token, chatIdInput;\n    switch(botType) {\n        case 'client':\n            token = form.getValues('client_bot_token');\n            chatIdInput = form.getValues('client_bot_chat_id');\n            setIsSendingTestClient(true);\n            break;\n        case 'admin':\n            token = form.getValues('admin_bot_token');\n            chatIdInput = form.getValues('admin_bot_chat_ids')?.split(',')[0]?.trim();\n            setIsSendingTestAdmin(true);\n            break;\n        case 'key':\n            token = form.getValues('key_bot_token');\n            chatIdInput = form.getValues('key_bot_admin_chat_ids')?.split(',')[0]?.trim();\n            setIsSendingTestKeyBot(true);\n            break;\n    }\n\n\n    if (!token || !chatIdInput) {\n        toast({ title: \"Ошибка\", description: `Токен бота и ID чата для ${botType} бота должны быть заполнены.`, variant: \"destructive\"});\n        if(botType === 'client') setIsSendingTestClient(false);\n        if(botType === 'admin') setIsSendingTestAdmin(false);\n        if(botType === 'key') setIsSendingTestKeyBot(false);\n        return;\n    }\n\n    try {\n        const response = await fetch('/api/admin/site-settings/telegram/test-message', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ botType, message }),\n        });\n        const result = await response.json();\n        if (!response.ok) throw new Error(result.message || `Не удалось отправить тестовое сообщение для ${botType} бота.`);\n        toast({ title: \"Тестовое сообщение\", description: result.message });\n    } catch (error: any) {\n        toast({ title: \"Ошибка отправки\", description: error.message, variant: \"destructive\" });\n    } finally {\n        if(botType === 'client') setIsSendingTestClient(false);\n        if(botType === 'admin') setIsSendingTestAdmin(false);\n        if(botType === 'key') setIsSendingTestKeyBot(false);\n    }\n  };\n\n  if (isFetching) {\n    return (\n        <div className=\"flex items-center justify-center p-10\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"ml-3 text-muted-foreground\">Загрузка настроек Telegram...</p>\n        </div>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-bold text-primary flex items-center\">\n            <Bot className=\"mr-2 h-5 w-5\" />\n            Настройки Telegram Ботов\n        </CardTitle>\n        <CardDescription className=\"text-muted-foreground\">Управление ботами для клиентских и административных уведомлений, а также для запросов активации ключей.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n            <Tabs defaultValue=\"client_bot\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3 mb-6\"> {/* Changed to grid-cols-3 */}\n                    <TabsTrigger value=\"client_bot\">Клиентский Бот</TabsTrigger>\n                    <TabsTrigger value=\"admin_bot\">Админский Бот</TabsTrigger>\n                    <TabsTrigger value=\"key_bot\">Key Bot (Активация)</TabsTrigger> {/* New Tab */}\n                </TabsList>\n\n                <TabsContent value=\"client_bot\" className=\"space-y-6\">\n                    <div>\n                        <Label htmlFor=\"client_bot_token\" className=\"text-foreground\">Токен Клиентского Бота</Label>\n                        <Input id=\"client_bot_token\" {...form.register(\"client_bot_token\")} placeholder=\"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\" className=\"mt-1\" disabled={isLoading} />\n                    </div>\n                    <div>\n                        <Label htmlFor=\"client_bot_chat_id\" className=\"text-foreground\">ID Канала/Чата Клиентского Бота</Label>\n                        <Input id=\"client_bot_chat_id\" {...form.register(\"client_bot_chat_id\")} placeholder=\"-1001234567890 или @channelname\" className=\"mt-1\" disabled={isLoading} />\n                    </div>\n                     <div className=\"pt-2 space-y-2\">\n                        <Label htmlFor=\"test_message_client\" className=\"text-foreground\">Тестовое сообщение для клиентского бота</Label>\n                        <div className=\"flex gap-2\">\n                            <Input id=\"test_message_client\" value={testMessageClient} onChange={(e) => setTestMessageClient(e.target.value)} placeholder=\"Тест клиентского бота!\" disabled={isSendingTestClient} />\n                            <Button type=\"button\" variant=\"outline\" onClick={() => handleSendTest('client', testMessageClient)} disabled={isSendingTestClient || !form.getValues('client_bot_token') || !form.getValues('client_bot_chat_id')} className=\"border-primary text-primary hover:bg-primary/10\">\n                                {isSendingTestClient ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/> : <Send className=\"mr-2 h-4 w-4\" />}\n                                Отправить\n                            </Button>\n                        </div>\n                    </div>\n                </TabsContent>\n\n                <TabsContent value=\"admin_bot\" className=\"space-y-6\">\n                    <div>\n                        <Label htmlFor=\"admin_bot_token\" className=\"text-foreground\">Токен Админского Бота</Label>\n                        <Input id=\"admin_bot_token\" {...form.register(\"admin_bot_token\")} placeholder=\"654321:ZYX-wvu9876...\" className=\"mt-1\" disabled={isLoading} />\n                    </div>\n                    <div>\n                        <Label htmlFor=\"admin_bot_chat_ids\" className=\"text-foreground\">ID Чатов Администраторов (через запятую)</Label>\n                        <Input id=\"admin_bot_chat_ids\" {...form.register(\"admin_bot_chat_ids\")} placeholder=\"-100987654321, -1001122334455\" className=\"mt-1\" disabled={isLoading} />\n                    </div>\n                     <div className=\"pt-2 space-y-2\">\n                        <Label htmlFor=\"test_message_admin\" className=\"text-foreground\">Тестовое сообщение для админского бота</Label>\n                         <div className=\"flex gap-2\">\n                            <Input id=\"test_message_admin\" value={testMessageAdmin} onChange={(e) => setTestMessageAdmin(e.target.value)} placeholder=\"Тест админского бота!\" disabled={isSendingTestAdmin} />\n                            <Button type=\"button\" variant=\"outline\" onClick={() => handleSendTest('admin', testMessageAdmin)} disabled={isSendingTestAdmin || !form.getValues('admin_bot_token') || !form.getValues('admin_bot_chat_ids')} className=\"border-primary text-primary hover:bg-primary/10\">\n                                {isSendingTestAdmin ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/> : <Send className=\"mr-2 h-4 w-4\" />}\n                                Отправить\n                            </Button>\n                        </div>\n                    </div>\n                    <Separator />\n                    <h4 className=\"text-md font-medium text-foreground\">Уведомления для Админского Бота:</h4>\n                    <div className=\"space-y-3\">\n                        {adminNotificationOptions.map((option) => (\n                          <div key={option.id} className=\"flex items-start p-2.5 border border-border/30 rounded-md bg-muted/20 hover:bg-muted/30 transition-colors\">\n                             <Controller\n                                control={form.control}\n                                name={option.id}\n                                render={({ field }) => (\n                                    <TooltipProvider>\n                                        <Tooltip delayDuration={100}>\n                                            <TooltipTrigger asChild>\n                                                <div className=\"flex items-center\">\n                                                    <Checkbox\n                                                        id={option.id}\n                                                        checked={field.value}\n                                                        onCheckedChange={field.onChange}\n                                                        className=\"mt-1 mr-3 border-primary data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\n                                                        disabled={isLoading || !option.implemented}\n                                                    />\n                                                </div>\n                                            </TooltipTrigger>\n                                            {!option.implemented && (\n                                                <TooltipContent side=\"right\">\n                                                    <p>Функция в разработке</p>\n                                                </TooltipContent>\n                                            )}\n                                        </Tooltip>\n                                    </TooltipProvider>\n                                )}\n                                />\n                                <div className=\"grid gap-1 leading-none\">\n                                    <Label htmlFor={option.id} className={`text-foreground font-medium flex items-center ${option.implemented ? 'cursor-pointer' : 'cursor-not-allowed opacity-60'}`}>\n                                        <option.icon className={`mr-2 h-4 w-4 ${option.implemented ? 'text-primary/80' : 'text-muted-foreground'}`}/>\n                                        {option.label}\n                                    </Label>\n                                    <p className=\"text-xs text-muted-foreground\">\n                                        {option.description}\n                                    </p>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </TabsContent>\n                \n                <TabsContent value=\"key_bot\" className=\"space-y-6\">\n                    <CardDescription className=\"text-sm text-muted-foreground\">\n                        Этот бот используется для получения запросов на активацию ключей от пользователей и позволяет администраторам одобрять/отклонять их прямо из Telegram.\n                    </CardDescription>\n                    <div>\n                        <Label htmlFor=\"key_bot_token\" className=\"text-foreground\">Токен Key Bot</Label>\n                        <Input id=\"key_bot_token\" {...form.register(\"key_bot_token\")} placeholder=\"777777:ABC-DEF...\" className=\"mt-1\" disabled={isLoading} />\n                    </div>\n                    <div>\n                        <Label htmlFor=\"key_bot_admin_chat_ids\" className=\"text-foreground\">ID Админ Чатов для Key Bot (через запятую)</Label>\n                        <Input id=\"key_bot_admin_chat_ids\" {...form.register(\"key_bot_admin_chat_ids\")} placeholder=\"-10012345, -10067890\" className=\"mt-1\" disabled={isLoading} />\n                    </div>\n                    <div className=\"pt-2 space-y-2\">\n                        <Label htmlFor=\"test_message_key_bot\" className=\"text-foreground\">Тестовое сообщение для Key Bot</Label>\n                         <div className=\"flex gap-2\">\n                            <Input id=\"test_message_key_bot\" value={testMessageKeyBot} onChange={(e) => setTestMessageKeyBot(e.target.value)} placeholder=\"Тест Key Bot!\" disabled={isSendingTestKeyBot} />\n                            <Button type=\"button\" variant=\"outline\" onClick={() => handleSendTest('key', testMessageKeyBot)} disabled={isSendingTestKeyBot || !form.getValues('key_bot_token') || !form.getValues('key_bot_admin_chat_ids')} className=\"border-primary text-primary hover:bg-primary/10\">\n                                {isSendingTestKeyBot ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/> : <Send className=\"mr-2 h-4 w-4\" />}\n                                Отправить\n                            </Button>\n                        </div>\n                    </div>\n                </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end pt-6 border-t border-border/50 mt-6\">\n                <Button type=\"submit\" className=\"bg-primary hover:bg-primary/90 text-primary-foreground\" disabled={isLoading || isFetching}>\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Сохранить настройки Telegram\n                </Button>\n            </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}