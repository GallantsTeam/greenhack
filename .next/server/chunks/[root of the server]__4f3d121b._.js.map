{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/user/%5BuserId%5D/licenses/route.ts"],"sourcesContent":["\n// src/app/api/user/[userId]/licenses/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { ActiveLicense, InventoryItem } from '@/types';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { userId: string } }\n) {\n  const userId = params.userId;\n\n  if (!userId || isNaN(parseInt(userId))) {\n    return NextResponse.json({ message: 'Valid User ID is required' }, { status: 400 });\n  }\n\n  try {\n    const results = await query(\n      `SELECT \n         ui.id as inventory_item_id, -- Use ui.id as inventory_item_id\n         ui.related_product_id, -- Need this for product specific details\n         ui.product_name as productName, \n         ui.acquired_at as purchaseDate, \n         ui.activated_at, \n         ui.expires_at as preCalculatedExpiry, \n         COALESCE(ppo.duration_days, cp.duration_days) as duration_days, \n         ppo.mode_label,\n         p.slug as productSlug,\n         p.retrieval_modal_how_to_run_link,\n         p.activation_type, -- Fetch from products\n         p.loader_download_url,\n         p.info_modal_content_html,\n         p.info_modal_support_link_text,\n         p.info_modal_support_link_url,\n         p.retrieval_modal_intro_text,\n         p.retrieval_modal_antivirus_text,\n         p.retrieval_modal_antivirus_link_text,\n         p.retrieval_modal_antivirus_link_url,\n         p.retrieval_modal_launcher_text,\n         p.retrieval_modal_launcher_link_text,\n         p.retrieval_modal_launcher_link_url,\n         p.retrieval_modal_key_paste_text,\n         p.retrieval_modal_support_text,\n         p.retrieval_modal_support_link_text,\n         p.retrieval_modal_support_link_url,\n         ui.activation_status -- Fetch activation_status from user_inventory\n       FROM user_inventory ui\n       LEFT JOIN products p ON ui.related_product_id = p.id\n       LEFT JOIN product_pricing_options ppo ON ui.product_pricing_option_id = ppo.id\n       LEFT JOIN case_prizes cp ON ui.case_prize_id = cp.id\n       WHERE ui.user_id = ? \n         AND ui.related_product_id IS NOT NULL -- Only product-based inventory items are licenses\n         AND (\n              (ui.is_used = TRUE AND (ui.expires_at IS NULL OR ui.expires_at > NOW())) -- Already active and not expired\n              OR \n              (ui.is_used = FALSE AND p.activation_type = 'key_request' AND ui.activation_status IN ('available', 'rejected', 'pending_admin_approval')) -- Not yet used but requires key request\n            )\n       ORDER BY ui.activated_at DESC, ui.acquired_at DESC`,\n      [parseInt(userId)]\n    );\n\n    const licenses: ActiveLicense[] = results.map((row: any) => {\n      let expiryDate: string | null = null;\n      if (row.activation_status === 'active' && row.preCalculatedExpiry) { // Only show expiry if active\n        expiryDate = new Date(row.preCalculatedExpiry).toISOString();\n      } else if (row.activation_status === 'active' && row.activated_at && row.duration_days) {\n        const activated = new Date(row.activated_at);\n        expiryDate = new Date(activated.setDate(activated.getDate() + parseInt(row.duration_days, 10))).toISOString();\n      }\n\n      return {\n        id: String(row.inventory_item_id), // Ensure this is a string if your ActiveLicense type expects string\n        productName: row.productName,\n        productSlug: row.productSlug,\n        inventory_item_id: row.inventory_item_id, // Added this field\n        purchaseDate: row.purchaseDate, \n        activated_at: row.activated_at ? new Date(row.activated_at).toISOString() : null,\n        expiryDate: expiryDate,\n        how_to_run_link: row.retrieval_modal_how_to_run_link || null,\n        mode_label: row.mode_label || null,\n        activation_type: row.activation_type || 'info_modal',\n        loader_download_url: row.loader_download_url,\n        info_modal_content_html: row.info_modal_content_html,\n        info_modal_support_link_text: row.info_modal_support_link_text,\n        info_modal_support_link_url: row.info_modal_support_link_url,\n        related_product_id: row.related_product_id,\n        activation_status: row.activation_status || 'available',\n        retrieval_modal_intro_text: row.retrieval_modal_intro_text,\n        retrieval_modal_antivirus_text: row.retrieval_modal_antivirus_text,\n        retrieval_modal_antivirus_link_text: row.retrieval_modal_antivirus_link_text,\n        retrieval_modal_antivirus_link_url: row.retrieval_modal_antivirus_link_url,\n        retrieval_modal_launcher_text: row.retrieval_modal_launcher_text,\n        retrieval_modal_launcher_link_text: row.retrieval_modal_launcher_link_text,\n        retrieval_modal_launcher_link_url: row.retrieval_modal_launcher_link_url,\n        retrieval_modal_key_paste_text: row.retrieval_modal_key_paste_text,\n        retrieval_modal_support_text: row.retrieval_modal_support_text,\n        retrieval_modal_support_link_text: row.retrieval_modal_support_link_text,\n        retrieval_modal_support_link_url: row.retrieval_modal_support_link_url,\n      };\n    });\n\n    return NextResponse.json(licenses);\n  } catch (error: any) {\n    console.error(`API Error fetching licenses for user ${userId}:`, error);\n    return NextResponse.json({ message: 'Internal Server Error', error: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AACA,8CAA8C;;;;AAC9C;AACA;;;AAGO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAkC;IAE1C,MAAM,SAAS,OAAO,MAAM;IAE5B,IAAI,CAAC,UAAU,MAAM,SAAS,UAAU;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACxB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDAuCkD,CAAC,EACpD;YAAC,SAAS;SAAQ;QAGpB,MAAM,WAA4B,QAAQ,GAAG,CAAC,CAAC;YAC7C,IAAI,aAA4B;YAChC,IAAI,IAAI,iBAAiB,KAAK,YAAY,IAAI,mBAAmB,EAAE;gBACjE,aAAa,IAAI,KAAK,IAAI,mBAAmB,EAAE,WAAW;YAC5D,OAAO,IAAI,IAAI,iBAAiB,KAAK,YAAY,IAAI,YAAY,IAAI,IAAI,aAAa,EAAE;gBACtF,MAAM,YAAY,IAAI,KAAK,IAAI,YAAY;gBAC3C,aAAa,IAAI,KAAK,UAAU,OAAO,CAAC,UAAU,OAAO,KAAK,SAAS,IAAI,aAAa,EAAE,MAAM,WAAW;YAC7G;YAEA,OAAO;gBACL,IAAI,OAAO,IAAI,iBAAiB;gBAChC,aAAa,IAAI,WAAW;gBAC5B,aAAa,IAAI,WAAW;gBAC5B,mBAAmB,IAAI,iBAAiB;gBACxC,cAAc,IAAI,YAAY;gBAC9B,cAAc,IAAI,YAAY,GAAG,IAAI,KAAK,IAAI,YAAY,EAAE,WAAW,KAAK;gBAC5E,YAAY;gBACZ,iBAAiB,IAAI,+BAA+B,IAAI;gBACxD,YAAY,IAAI,UAAU,IAAI;gBAC9B,iBAAiB,IAAI,eAAe,IAAI;gBACxC,qBAAqB,IAAI,mBAAmB;gBAC5C,yBAAyB,IAAI,uBAAuB;gBACpD,8BAA8B,IAAI,4BAA4B;gBAC9D,6BAA6B,IAAI,2BAA2B;gBAC5D,oBAAoB,IAAI,kBAAkB;gBAC1C,mBAAmB,IAAI,iBAAiB,IAAI;gBAC5C,4BAA4B,IAAI,0BAA0B;gBAC1D,gCAAgC,IAAI,8BAA8B;gBAClE,qCAAqC,IAAI,mCAAmC;gBAC5E,oCAAoC,IAAI,kCAAkC;gBAC1E,+BAA+B,IAAI,6BAA6B;gBAChE,oCAAoC,IAAI,kCAAkC;gBAC1E,mCAAmC,IAAI,iCAAiC;gBACxE,gCAAgC,IAAI,8BAA8B;gBAClE,8BAA8B,IAAI,4BAA4B;gBAC9D,mCAAmC,IAAI,iCAAiC;gBACxE,kCAAkC,IAAI,gCAAgC;YACxE;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC,CAAC,EAAE;QACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG;AACF","debugId":null}}]
}