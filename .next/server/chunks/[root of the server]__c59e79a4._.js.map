{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/user/%5BuserId%5D/inventory-items/route.ts"],"sourcesContent":["\n// src/app/api/user/[userId]/inventory-items/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { InventoryItemWithDetails } from '@/types';\nimport type { OkPacket } from 'mysql2';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { userId: string } }\n) {\n  const userId = params.userId;\n\n  if (!userId || isNaN(parseInt(userId))) {\n    return NextResponse.json({ message: 'Valid User ID is required' }, { status: 400 });\n  }\n\n  try {\n    // --- Auto-delete expired items for this user ---\n    const deleteResult = await query(\n      `DELETE FROM user_inventory\n       WHERE user_id = ?\n         AND expires_at IS NOT NULL\n         AND expires_at < NOW()\n         AND (is_used = TRUE OR activation_status = 'active')`,\n      [parseInt(userId)]\n    ) as OkPacket;\n\n    if (deleteResult.affectedRows > 0) {\n      console.log(`[API Inventory] Successfully deleted ${deleteResult.affectedRows} expired items for user ${userId}.`);\n    }\n    // --- End auto-delete ---\n\n    const results = await query(\n      `SELECT \n         ui.id, \n         ui.user_id, \n         ui.case_prize_id, \n         ui.related_product_id, \n         ui.product_pricing_option_id, \n         ui.product_name, \n         ui.product_image_url, \n         ui.activation_code, \n         ui.expires_at, \n         ui.acquired_at, \n         ui.is_used,\n         ui.purchase_id,\n         ui.case_opening_id,\n         COALESCE(ppo.duration_days, cp.duration_days) as duration_days, \n         ppo.mode_label,\n         ui.activated_at,\n         ui.activation_status\n       FROM user_inventory ui\n       LEFT JOIN product_pricing_options ppo ON ui.product_pricing_option_id = ppo.id\n       LEFT JOIN case_prizes cp ON ui.case_prize_id = cp.id \n       WHERE ui.user_id = ?\n       ORDER BY ui.acquired_at DESC`,\n      [parseInt(userId)]\n    );\n\n    const inventoryItems: InventoryItemWithDetails[] = results.map((row: any) => ({\n      id: row.id,\n      user_id: row.user_id,\n      case_prize_id: row.case_prize_id,\n      related_product_id: row.related_product_id,\n      product_pricing_option_id: row.product_pricing_option_id,\n      product_name: row.product_name,\n      product_image_url: row.product_image_url,\n      activation_code: row.activation_code,\n      expires_at: row.expires_at,\n      acquired_at: row.acquired_at,\n      is_used: Boolean(row.is_used),\n      purchase_id: row.purchase_id,\n      case_opening_id: row.case_opening_id,\n      duration_days: row.duration_days ? parseInt(row.duration_days, 10) : null,\n      mode_label: row.mode_label || null,\n      activated_at: row.activated_at,\n      activation_status: row.activation_status || 'available',\n    }));\n\n    return NextResponse.json(inventoryItems);\n  } catch (error: any) {\n    console.error(`API Error fetching inventory items for user ${userId}:`, error);\n    const errorMessage = error.message || 'An unexpected error occurred on the server while fetching inventory.';\n    return NextResponse.json({ message: `Failed to retrieve inventory. Server error: ${errorMessage}` }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":"AACA,qDAAqD;;;;AACrD;AACA;;;AAIO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAkC;IAE1C,MAAM,SAAS,OAAO,MAAM;IAE5B,IAAI,CAAC,UAAU,MAAM,SAAS,UAAU;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,IAAI;QACF,kDAAkD;QAClD,MAAM,eAAe,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAC7B,CAAC;;;;6DAIsD,CAAC,EACxD;YAAC,SAAS;SAAQ;QAGpB,IAAI,aAAa,YAAY,GAAG,GAAG;YACjC,QAAQ,GAAG,CAAC,CAAC,qCAAqC,EAAE,aAAa,YAAY,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACnH;QACA,0BAA0B;QAE1B,MAAM,UAAU,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACxB,CAAC;;;;;;;;;;;;;;;;;;;;;;mCAsB4B,CAAC,EAC9B;YAAC,SAAS;SAAQ;QAGpB,MAAM,iBAA6C,QAAQ,GAAG,CAAC,CAAC,MAAa,CAAC;gBAC5E,IAAI,IAAI,EAAE;gBACV,SAAS,IAAI,OAAO;gBACpB,eAAe,IAAI,aAAa;gBAChC,oBAAoB,IAAI,kBAAkB;gBAC1C,2BAA2B,IAAI,yBAAyB;gBACxD,cAAc,IAAI,YAAY;gBAC9B,mBAAmB,IAAI,iBAAiB;gBACxC,iBAAiB,IAAI,eAAe;gBACpC,YAAY,IAAI,UAAU;gBAC1B,aAAa,IAAI,WAAW;gBAC5B,SAAS,QAAQ,IAAI,OAAO;gBAC5B,aAAa,IAAI,WAAW;gBAC5B,iBAAiB,IAAI,eAAe;gBACpC,eAAe,IAAI,aAAa,GAAG,SAAS,IAAI,aAAa,EAAE,MAAM;gBACrE,YAAY,IAAI,UAAU,IAAI;gBAC9B,cAAc,IAAI,YAAY;gBAC9B,mBAAmB,IAAI,iBAAiB,IAAI;YAC9C,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,4CAA4C,EAAE,OAAO,CAAC,CAAC,EAAE;QACxE,MAAM,eAAe,MAAM,OAAO,IAAI;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,4CAA4C,EAAE,cAAc;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrH;AACF","debugId":null}}]
}