{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-settings/smtp/test-email/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-settings/smtp/test-email/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SmtpSettings } from '@/types';\nimport nodemailer from 'nodemailer';\n\nconst SETTINGS_ROW_ID = 1;\n\nexport async function POST(request: NextRequest) {\n  console.log('[API SMTP Test] Received request');\n  try {\n    // TODO: Add proper admin authentication check here\n    const { recipientEmail } = await request.json();\n    console.log('[API SMTP Test] Recipient Email:', recipientEmail);\n\n    if (!recipientEmail || typeof recipientEmail !== 'string' || !recipientEmail.includes('@')) {\n      console.log('[API SMTP Test] Invalid recipient email provided');\n      return NextResponse.json({ message: 'Необходимо указать корректный Email получателя.' }, { status: 400 });\n    }\n\n    let smtpConfig: SmtpSettings & { smtp_password?: string | null };\n    try {\n      const settingsResults = await query('SELECT * FROM site_smtp_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n      if (!Array.isArray(settingsResults) || settingsResults.length === 0) {\n        console.log('[API SMTP Test] SMTP settings not found in DB');\n        return NextResponse.json({ message: 'SMTP настройки не найдены. Пожалуйста, сначала сохраните их.' }, { status: 404 });\n      }\n      smtpConfig = settingsResults[0];\n      console.log('[API SMTP Test] Fetched SMTP config (password excluded from log):', { ...smtpConfig, smtp_password: '***' });\n    } catch (dbError: any) {\n      console.error('[API SMTP Test] Error fetching SMTP settings from DB:', dbError);\n      return NextResponse.json({ message: `Ошибка доступа к настройкам SMTP: ${dbError.message}` }, { status: 500 });\n    }\n\n    if (!smtpConfig.smtp_host || !smtpConfig.smtp_port || !smtpConfig.from_email) {\n      console.log('[API SMTP Test] Core SMTP settings missing from fetched config');\n      return NextResponse.json({ message: 'Основные SMTP настройки (Хост, Порт, Email отправителя) не заданы.' }, { status: 400 });\n    }\n\n    const transporterOptions: nodemailer.TransportOptions = {\n        host: smtpConfig.smtp_host,\n        port: Number(smtpConfig.smtp_port),\n        secure: Number(smtpConfig.smtp_port) === 465 || smtpConfig.smtp_encryption === 'ssl', // Use SSL for port 465\n        auth: (smtpConfig.smtp_username && smtpConfig.smtp_password) ? {\n            user: smtpConfig.smtp_username,\n            pass: smtpConfig.smtp_password,\n        } : undefined,\n    };\n    \n    // Explicitly handle TLS/None for non-465 ports\n    if (smtpConfig.smtp_encryption === 'tls' && Number(smtpConfig.smtp_port) !== 465) {\n        transporterOptions.secure = false; // TLS usually starts on non-secure port then upgrades\n        transporterOptions.requireTLS = true;\n    } else if (smtpConfig.smtp_encryption === 'none' && Number(smtpConfig.smtp_port) !== 465) {\n        transporterOptions.secure = false;\n        transporterOptions.ignoreTLS = true; // Explicitly ignore TLS for 'none'\n    }\n\n    console.log('[API SMTP Test] Nodemailer transporter options prepared:', { \n        ...transporterOptions, \n        auth: transporterOptions.auth ? { user: transporterOptions.auth.user, pass: '***' } : undefined \n    });\n\n    const transporter = nodemailer.createTransport(transporterOptions as any);\n\n    try {\n      console.log('[API SMTP Test] Verifying transporter...');\n      await transporter.verify();\n      console.log('[API SMTP Test] Nodemailer transporter verified successfully.');\n    } catch (verifyError: any) {\n      console.error('[API SMTP Test] Nodemailer transporter verification failed:', verifyError);\n      return NextResponse.json({ message: `Ошибка верификации SMTP сервера: ${verifyError.message}. Проверьте настройки (хост, порт, шифрование, учетные данные).` }, { status: 500 });\n    }\n    \n    const mailOptions: nodemailer.SendMailOptions = {\n      from: `\"${smtpConfig.from_name || 'Green Hack Test'}\" <${smtpConfig.from_email}>`,\n      to: recipientEmail,\n      subject: 'Green Hack - Тестовое письмо SMTP ✔',\n      text: 'Это тестовое письмо, отправленное из настроек SMTP вашего сайта Green Hack.',\n      html: '<p>Это тестовое письмо, отправленное из <strong>настроек SMTP</strong> вашего сайта Green Hack.</p>',\n    };\n    console.log('[API SMTP Test] Mail options prepared (recipient hidden for log):', { ...mailOptions, to: '***' });\n\n    try {\n      console.log('[API SMTP Test] Sending email...');\n      let info = await transporter.sendMail(mailOptions);\n      console.log('[API SMTP Test] Message sent successfully: %s', info.messageId);\n      return NextResponse.json({ message: `Тестовое письмо успешно отправлено на ${recipientEmail}. Message ID: ${info.messageId}` }, { status: 200 });\n    } catch (emailError: any) {\n      console.error('[API SMTP Test] Error sending email via nodemailer:', emailError);\n      return NextResponse.json({ message: `Ошибка отправки тестового письма: ${emailError.message}. Проверьте настройки SMTP и учетные данные. Также убедитесь, что ваш SMTP-сервер доступен.` }, { status: 500 });\n    }\n\n  } catch (error: any) {\n    // Catch any other unexpected errors in the main try block\n    console.error('[API SMTP Test] Unhandled error in POST handler:', error);\n    return NextResponse.json({ message: `Внутренняя ошибка сервера: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}