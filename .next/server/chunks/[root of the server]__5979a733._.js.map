{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/email.ts"],"sourcesContent":["\n// src/lib/email.ts\nimport nodemailer from 'nodemailer';\nimport { query } from '@/lib/mysql';\nimport type { SmtpSettings, SiteNotificationSettings } from '@/types';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst SETTINGS_ROW_ID = 1;\n\nasync function getSmtpSettings(): Promise<(SmtpSettings & { smtp_password?: string | null }) | null> {\n  try {\n    const results = await query('SELECT * FROM site_smtp_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    if (results.length > 0) {\n      return results[0];\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching SMTP settings for email:\", error);\n    return null;\n  }\n}\n\nasync function getNotificationSettings(): Promise<SiteNotificationSettings | null> {\n  try {\n    const results = await query('SELECT * FROM site_notification_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    if (results.length > 0) {\n      const settings = results[0];\n      return {\n        id: settings.id,\n        notify_on_registration: Boolean(settings.notify_on_registration),\n        notify_on_balance_deposit: Boolean(settings.notify_on_balance_deposit),\n        notify_on_product_purchase: Boolean(settings.notify_on_product_purchase),\n        notify_on_support_reply: Boolean(settings.notify_on_support_reply),\n        notify_on_software_activation: Boolean(settings.notify_on_software_activation),\n        notify_on_license_expiry_soon: Boolean(settings.notify_on_license_expiry_soon),\n        notify_on_promotions: Boolean(settings.notify_on_promotions),\n        updated_at: settings.updated_at,\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching notification settings for email:\", error);\n    return null;\n  }\n}\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  text: string;\n  html: string;\n}\n\nasync function renderEmailTemplate(templateName: string, data: Record<string, any>): Promise<string> {\n  try {\n    const baseTemplatePath = path.join(process.cwd(), 'src', 'emails', 'base-email-template.html');\n    const specificTemplatePath = path.join(process.cwd(), 'src', 'emails', `${templateName}.html`);\n\n    let baseTemplateContent = await fs.readFile(baseTemplatePath, 'utf-8');\n    let specificTemplateContent = await fs.readFile(specificTemplatePath, 'utf-8');\n\n    // Populate specific template\n    for (const key in data) {\n      specificTemplateContent = specificTemplateContent.replace(new RegExp(`{{${key}}}`, 'g'), String(data[key] === null || data[key] === undefined ? '' : data[key]));\n    }\n\n    // Populate base template\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{emailBody}}`, 'g'), specificTemplateContent);\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{emailTitle}}`, 'g'), String(data.emailTitle || data.subject || 'Уведомление от ' + (data.siteName || 'сайта')));\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{siteName}}`, 'g'), String(data.siteName || 'Green Hacks'));\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{currentYear}}`, 'g'), String(new Date().getFullYear()));\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{siteUrl}}`, 'g'), String(data.siteUrl || process.env.NEXT_PUBLIC_SITE_URL || '#'));\n    \n    return baseTemplateContent;\n  } catch (error) {\n    console.error(`Error rendering email template ${templateName}:`, error);\n    throw new Error(`Failed to render email template ${templateName}.`);\n  }\n}\n\n\nexport async function sendEmail(options: EmailOptions): Promise<{ success: boolean; message: string; error?: any }> {\n  const smtpConfig = await getSmtpSettings();\n\n  if (!smtpConfig || !smtpConfig.smtp_host || !smtpConfig.smtp_port || !smtpConfig.from_email) {\n    console.error(\"Email Service: SMTP settings are incomplete or not found.\");\n    return { success: false, message: \"SMTP settings are incomplete.\" };\n  }\n\n  const transporterOptions: nodemailer.TransportOptions = {\n    host: smtpConfig.smtp_host,\n    port: Number(smtpConfig.smtp_port),\n    secure: Number(smtpConfig.smtp_port) === 465 || smtpConfig.smtp_encryption === 'ssl',\n    auth: (smtpConfig.smtp_username && smtpConfig.smtp_password) ? {\n      user: smtpConfig.smtp_username,\n      pass: smtpConfig.smtp_password,\n    } : undefined,\n  };\n\n  if (smtpConfig.smtp_encryption === 'tls' && Number(smtpConfig.smtp_port) !== 465) {\n    transporterOptions.secure = false;\n    transporterOptions.requireTLS = true;\n  } else if (smtpConfig.smtp_encryption === 'none' && Number(smtpConfig.smtp_port) !== 465) {\n    transporterOptions.secure = false;\n    transporterOptions.ignoreTLS = true;\n  }\n\n  const transporter = nodemailer.createTransport(transporterOptions as any);\n\n  try {\n    await transporter.verify(); \n    console.log(`Email Service: Sending email to ${options.to} with subject \"${options.subject}\"`);\n    await transporter.sendMail({\n      from: `\"${smtpConfig.from_name || 'Green Hack'}\" <${smtpConfig.from_email}>`,\n      ...options,\n    });\n    return { success: true, message: `Email sent successfully to ${options.to}` };\n  } catch (error: any) {\n    console.error(\"Email Service: Error sending email:\", error);\n    return { success: false, message: `Failed to send email: ${error.message}`, error };\n  }\n}\n\nexport async function sendRegistrationWelcomeEmail(to: string, username: string) {\n  const notificationSettings = await getNotificationSettings();\n  if (!notificationSettings?.notify_on_registration) {\n    console.log(\"Email Service: Registration notifications are disabled.\");\n    return;\n  }\n\n  const smtpConfig = await getSmtpSettings();\n  const siteName = smtpConfig?.from_name || process.env.NEXT_PUBLIC_SITE_NAME || 'Green Hacks';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || '#';\n  const subject = `Добро пожаловать на ${siteName}, ${username}!`;\n\n  try {\n    const htmlBody = await renderEmailTemplate('registration', {\n      username: username,\n      siteName: siteName,\n      loginLink: `${siteUrl}/auth/login`,\n      emailTitle: subject,\n      subject: subject, // For placeholders if emailTitle is not directly used in specific template\n      siteUrl: siteUrl,\n    });\n\n    await sendEmail({\n      to,\n      subject: subject,\n      text: `Привет, ${username}!\\n\\nСпасибо за регистрацию на ${siteName}. Ваш аккаунт успешно создан.\\n\\nВаш логин: ${username}\\n\\nПерейти на сайт: ${siteUrl}\\nВойти в аккаунт: ${siteUrl}/auth/login\\n\\nС уважением,\\nКоманда ${siteName}`,\n      html: htmlBody,\n    });\n  } catch (error) {\n    console.error(\"Error preparing or sending registration welcome email:\", error);\n  }\n}\n\nexport async function sendPurchaseConfirmationEmail(to: string, username: string, productName: string, durationDays: number | null, amountPaidGh: number) {\n  const notificationSettings = await getNotificationSettings();\n  if (!notificationSettings?.notify_on_product_purchase) {\n    console.log(\"Email Service: Product purchase notifications are disabled.\");\n    return;\n  }\n\n  const smtpConfig = await getSmtpSettings();\n  const siteName = smtpConfig?.from_name || process.env.NEXT_PUBLIC_SITE_NAME || 'Green Hacks';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || '#';\n  const subject = `Подтверждение покупки на ${siteName}`;\n  const durationText = durationDays ? `${durationDays} дн.` : '';\n\n  try {\n    const htmlBody = await renderEmailTemplate('purchase-confirmation', {\n      username: username,\n      siteName: siteName,\n      productName: productName,\n      productDuration: durationText,\n      // productMode: '', // Placeholder, add if needed\n      amountPaidGh: amountPaidGh.toFixed(2),\n      purchaseDate: new Date().toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }),\n      inventoryLink: `${siteUrl}/account/inventory`,\n      emailTitle: subject,\n      subject: subject,\n      siteUrl: siteUrl,\n    });\n\n    await sendEmail({\n      to,\n      subject: subject,\n      text: `Привет, ${username}!\\n\\nВы успешно приобрели \"${productName}\"${durationText ? ` (${durationText})` : ''} за ${amountPaidGh.toFixed(2)} GH.\\n\\nТовар добавлен в ваш инвентарь: ${siteUrl}/account/inventory\\n\\nС уважением,\\nКоманда ${siteName}`,\n      html: htmlBody,\n    });\n  } catch (error) {\n    console.error(\"Error preparing or sending purchase confirmation email:\", error);\n  }\n}\n\nexport async function sendBalanceUpdateEmail(to: string, username: string, amountGh: number, reason: string, newBalance: number) {\n  const notificationSettings = await getNotificationSettings();\n  if (!notificationSettings?.notify_on_balance_deposit) { \n    console.log(\"Email Service: Balance update notifications are disabled.\");\n    return;\n  }\n  \n  const smtpConfig = await getSmtpSettings();\n  const siteName = smtpConfig?.from_name || process.env.NEXT_PUBLIC_SITE_NAME || 'Green Hacks';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || '#';\n  const subject = `Обновление баланса на ${siteName}`;\n  const actionText = amountGh > 0 ? \"пополнен\" : \"изменен\";\n  const amountText = amountGh > 0 ? `+${amountGh.toFixed(2)} GH` : `${amountGh.toFixed(2)} GH`;\n\n  try {\n    const htmlBody = await renderEmailTemplate('balance-topup', {\n        username: username,\n        siteName: siteName,\n        topUpAmountGh: amountText,\n        paymentMethod: reason, // Using reason as payment method for simplicity\n        topUpDate: new Date().toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }),\n        newBalanceGh: newBalance.toFixed(2),\n        accountBalanceLink: `${siteUrl}/account/balance`,\n        emailTitle: subject,\n        subject: subject,\n        siteUrl: siteUrl,\n    });\n\n    await sendEmail({\n      to,\n      subject: subject,\n      text: `Привет, ${username}!\\n\\nВаш баланс был ${actionText} на ${amountText}. Причина: ${reason}.\\nНовый баланс: ${newBalance.toFixed(2)} GH.\\n\\nС уважением,\\nКоманда ${siteName}`,\n      html: htmlBody,\n    });\n  } catch (error) {\n    console.error(\"Error preparing or sending balance update email:\", error);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/telegram.ts"],"sourcesContent":["\n// src/lib/telegram.ts\nimport { query } from '@/lib/mysql';\nimport type { SiteTelegramSettings, AdminTelegramNotificationPrefs, Product, ProductPricingOption, InventoryItemWithDetails, User, SiteNotificationSettings } from '@/types';\n\nconst SETTINGS_ROW_ID = 1; // Assuming settings are in a single row with id=1\n\nasync function getTelegramSettingsFromDb(): Promise<{\n  telegramSettings: SiteTelegramSettings | null;\n  notificationPrefs: AdminTelegramNotificationPrefs | null;\n  siteNotificationSettings: SiteNotificationSettings | null; \n}> {\n  // console.log(\"[TelegramLib][getTelegramSettingsFromDb] Fetching Telegram configuration from DB...\");\n  try {\n    const [tgSettingsResults, adminPrefsResults, siteNotificationSettingsResults] = await Promise.all([\n      query('SELECT * FROM site_telegram_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]),\n      query('SELECT * FROM admin_telegram_notification_prefs WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]),\n      query('SELECT * FROM site_notification_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID])\n    ]);\n\n    const telegramSettings: SiteTelegramSettings | null =\n      (Array.isArray(tgSettingsResults) && tgSettingsResults.length > 0) ? tgSettingsResults[0] : null;\n    \n    const adminPrefsDb = (Array.isArray(adminPrefsResults) && adminPrefsResults.length > 0) ? adminPrefsResults[0] : null;\n    const notificationPrefs: AdminTelegramNotificationPrefs | null = adminPrefsDb ? {\n        id: adminPrefsDb.id,\n        notify_admin_on_balance_deposit: Boolean(adminPrefsDb.notify_admin_on_balance_deposit),\n        notify_admin_on_product_purchase: Boolean(adminPrefsDb.notify_admin_on_product_purchase),\n        notify_admin_on_promo_code_creation: Boolean(adminPrefsDb.notify_admin_on_promo_code_creation),\n        notify_admin_on_admin_login: Boolean(adminPrefsDb.notify_admin_on_admin_login),\n        notify_admin_on_key_activation_request: adminPrefsDb.notify_admin_on_key_activation_request === undefined ? true : Boolean(adminPrefsDb.notify_admin_on_key_activation_request),\n        updated_at: adminPrefsDb.updated_at,\n    } : null;\n    \n    const siteNotificationSettingsDb = (Array.isArray(siteNotificationSettingsResults) && siteNotificationSettingsResults.length > 0) ? siteNotificationSettingsResults[0] : null;\n    const siteNotificationSettings: SiteNotificationSettings | null = siteNotificationSettingsDb ? {\n        id: siteNotificationSettingsDb.id || SETTINGS_ROW_ID, \n        notify_on_registration: Boolean(siteNotificationSettingsDb.notify_on_registration), \n        notify_on_balance_deposit: Boolean(siteNotificationSettingsDb.notify_on_balance_deposit),\n        notify_on_product_purchase: Boolean(siteNotificationSettingsDb.notify_on_product_purchase),\n        notify_on_support_reply: Boolean(siteNotificationSettingsDb.notify_on_support_reply),\n        notify_on_software_activation: Boolean(siteNotificationSettingsDb.notify_on_software_activation),\n        notify_on_license_expiry_soon: Boolean(siteNotificationSettingsDb.notify_on_license_expiry_soon),\n        notify_on_promotions: Boolean(siteNotificationSettingsDb.notify_on_promotions),\n        updated_at: siteNotificationSettingsDb.updated_at,\n    } : null;\n    \n    return { telegramSettings, notificationPrefs, siteNotificationSettings };\n  } catch (error) {\n    console.error(\"[TelegramLib][getTelegramSettingsFromDb] Error fetching Telegram configuration:\", error);\n    return { telegramSettings: null, notificationPrefs: null, siteNotificationSettings: null };\n  }\n}\n\n\nexport async function sendTelegramMessage(\n  botToken: string,\n  chatId: string, \n  message: string,\n  parseMode: 'MarkdownV2' | 'HTML' = 'MarkdownV2',\n  replyMarkup?: object \n): Promise<{ success: boolean; message?: string; error?: any }> {\n  // console.log(`[TelegramLib] sendTelegramMessage called. Token (start): ${botToken ? botToken.substring(0,10) + '...' : 'N/A'}, ChatID: ${chatId}, Message (start): \"${message.substring(0,30)}...\", ParseMode: ${parseMode}`);\n\n  if (!botToken || !chatId || !message) {\n    const errorMsg = \"[TelegramLib] Send Error: Missing botToken, chatId, or message for Telegram.\";\n    console.error(errorMsg);\n    return { success: false, message: errorMsg };\n  }\n\n  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;\n  \n  const bodyPayload: any = {\n    chat_id: chatId, \n    text: message,\n    parse_mode: parseMode,\n  };\n  if (replyMarkup) {\n    bodyPayload.reply_markup = replyMarkup;\n  }\n\n  // console.log(`[TelegramLib] Preparing to send. Final chat_id type: ${typeof bodyPayload.chat_id}, value: '${bodyPayload.chat_id}'`);\n  // console.log(`[TelegramLib] EXACT PAYLOAD TO TELEGRAM (token details excluded):`, JSON.stringify({ ...bodyPayload, bot_token_info: `Token ending with ...${botToken.slice(-6)}` }, null, 2));\n\n\n  try {\n    const response = await fetch(telegramApiUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(bodyPayload),\n    });\n    const data = await response.json();\n    // console.log(`[TelegramLib] Telegram API response status: ${response.status}, ok: ${response.ok}`);\n    // console.log('[TelegramLib] Telegram API response data:', JSON.stringify(data, null, 2));\n\n\n    if (data.ok) {\n      // console.log(`[TelegramLib] Message sent successfully to chat_id ${chatId}.`);\n      return { success: true, message: `Message sent to ${chatId}` };\n    } else {\n      let detailedMessage = `Telegram API Error: ${data.description || 'Unknown error from Telegram API'}`;\n      if (data.description && String(data.description).toLowerCase().includes(\"chat not found\")) {\n        detailedMessage = `Telegram API Error for Chat ID '${chatId}': ${data.description} (Hint: Ensure bot has access to this specific Chat ID. If it's a user ID, the user must have started the bot. If it's a group/channel ID, the bot must be a member/admin and the ID should typically be negative for groups/supergroups. Verify the bot is in the group/channel.)`;\n      }\n      return { success: false, message: detailedMessage, error: data };\n    }\n  } catch (error: any) {\n    console.error('[TelegramLib] Error sending Telegram message via fetch:', error);\n    return { success: false, message: `Network or parsing error: ${error.message}`, error };\n  }\n}\n\nfunction escapeTelegramMarkdownV2(text: string | number | null | undefined): string {\n  if (text === null || text === undefined) return '';\n  const textStr = String(text);\n  const escapeChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];\n  return textStr.split('').map(char => escapeChars.includes(char) ? `\\\\${char}` : char).join('');\n}\n\nexport async function notifyAdminOnBalanceDeposit(userId: number, username: string, amountGh: number, reason?: string) {\n  console.log(`[TelegramLib LOG] Attempting notifyAdminOnBalanceDeposit for user: ${username} (ID: ${userId}), amount: ${amountGh}, reason: ${reason || 'N/A'}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettingsFromDb();\n\n  if (!telegramSettings?.admin_bot_token) {\n    console.log(\"[TelegramLib LOG] notifyAdminOnBalanceDeposit: Admin bot token NOT configured.\");\n    return;\n  }\n  if (!telegramSettings.admin_bot_chat_ids) {\n    console.log(\"[TelegramLib LOG] notifyAdminOnBalanceDeposit: Admin bot chat IDs NOT configured.\");\n    return;\n  }\n  if (!notificationPrefs?.notify_admin_on_balance_deposit) {\n    console.log(\"[TelegramLib LOG] notifyAdminOnBalanceDeposit: Notification type is DISABLED in settings.\");\n    return;\n  }\n  console.log(\"[TelegramLib LOG] notifyAdminOnBalanceDeposit: Settings OK. Proceeding to send.\");\n\n  const reasonText = reason ? `\\nПричина: \\`${escapeTelegramMarkdownV2(reason)}\\`` : '';\n  const message = `💰 *Пополнение баланса*\nПользователь: \\`${escapeTelegramMarkdownV2(username)}\\` (ID: \\`${userId}\\`)\nСумма: \\`+${escapeTelegramMarkdownV2(amountGh.toFixed(2))}\\` GH${reasonText}`;\n  \n  const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n  for (const chatId of chatIds) {\n    try {\n      console.log(`[TelegramLib LOG] Sending balance deposit notification to admin chat ID: ${chatId}`);\n      const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n      if (!result.success) {\n          console.error(`[TelegramLib LOG] Failed to send balance deposit notification to ${chatId}:`, result.message, result.error);\n      } else {\n          console.log(`[TelegramLib LOG] Balance deposit notification sent successfully to ${chatId}.`);\n      }\n    } catch (e) {\n        console.error(`[TelegramLib LOG] CRITICAL ERROR sending balance deposit notification to ${chatId}:`, e);\n    }\n  }\n}\n\nexport async function notifyAdminOnProductPurchase(userId: number, username: string, productName: string, durationDays: number | null, amountGh: number) {\n  console.log(`[TelegramLib LOG] Attempting notifyAdminOnProductPurchase for user: ${username}, product: ${productName}, amount: ${amountGh}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettingsFromDb();\n  if (!telegramSettings?.admin_bot_token || !telegramSettings.admin_bot_chat_ids || !notificationPrefs?.notify_admin_on_product_purchase) {\n    console.log(\"[TelegramLib LOG] notifyAdminOnProductPurchase: Check failed - Bot token, chat IDs, or setting disabled.\");\n    return;\n  }\n  console.log(\"[TelegramLib LOG] notifyAdminOnProductPurchase: Settings OK. Proceeding to send.\");\n  const durationText = durationDays ? ` (${escapeTelegramMarkdownV2(durationDays)} дн\\\\.)` : '';\n  const message = `🛍️ *Новая покупка товара*\nПользователь: \\`${escapeTelegramMarkdownV2(username)}\\` (ID: \\`${userId}\\`)\nТовар: \\`${escapeTelegramMarkdownV2(productName)}\\`${durationText}\nСумма: \\`${escapeTelegramMarkdownV2(amountGh.toFixed(2))}\\` GH`;\n\n  const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n  for (const chatId of chatIds) {\n     try {\n        console.log(`[TelegramLib LOG] Sending product purchase notification to admin chat ID: ${chatId}`);\n        const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n        if (!result.success) {\n            console.error(`[TelegramLib LOG] Failed to send product purchase notification to ${chatId}:`, result.message, result.error);\n        } else {\n            console.log(`[TelegramLib LOG] Product purchase notification sent successfully to ${chatId}.`);\n        }\n    } catch (e) {\n        console.error(`[TelegramLib LOG] CRITICAL ERROR sending product purchase notification to ${chatId}:`, e);\n    }\n  }\n}\n\nexport async function notifyAdminOnPromoCodeCreation(\n  adminUsername: string | null,\n  promoCode: { code: string; type: string; value_gh?: number | null; product_name?: string; duration_days?: number | null; mode_label?: string | null; max_uses: number; expires_at?: string | null }\n) {\n  console.log(`[TelegramLib LOG] Attempting notifyAdminOnPromoCodeCreation for code: ${promoCode.code}, created by: ${adminUsername || 'System'}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettingsFromDb();\n  if (!telegramSettings?.admin_bot_token || !telegramSettings.admin_bot_chat_ids || !notificationPrefs?.notify_admin_on_promo_code_creation) {\n    console.log(\"[TelegramLib LOG] notifyAdminOnPromoCodeCreation: Check failed - Bot token, chat IDs, or setting disabled.\");\n    return;\n  }\n  console.log(\"[TelegramLib LOG] notifyAdminOnPromoCodeCreation: Settings OK. Proceeding to send.\");\n\n  let rewardText = '';\n  if (promoCode.type === 'balance_gh' && promoCode.value_gh) {\n    rewardText = `Баланс: \\`${escapeTelegramMarkdownV2(promoCode.value_gh.toFixed(2))}\\` GH`;\n  } else if (promoCode.type === 'product' && promoCode.product_name) {\n    const duration = promoCode.duration_days ? ` (${escapeTelegramMarkdownV2(promoCode.duration_days)} дн\\\\.)` : '';\n    const mode = promoCode.mode_label ? ` [${escapeTelegramMarkdownV2(promoCode.mode_label)}]` : '';\n    rewardText = `Товар: \\`${escapeTelegramMarkdownV2(promoCode.product_name)}\\`${duration}${mode}`;\n  }\n\n  const message = `🎁 *Создан новый промокод*\nКод: \\`${escapeTelegramMarkdownV2(promoCode.code)}\\`\nТип: \\`${escapeTelegramMarkdownV2(promoCode.type)}\\`\nНаграда: ${rewardText}\nМакс\\\\. использований: \\`${promoCode.max_uses}\\`\nИстекает: \\`${promoCode.expires_at ? escapeTelegramMarkdownV2(new Date(promoCode.expires_at).toLocaleString('ru-RU')) : 'Бессрочно'}\\`\n${adminUsername ? `Создал: \\`${escapeTelegramMarkdownV2(adminUsername)}\\`` : 'Создан системой'}`;\n\n  const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n  for (const chatId of chatIds) {\n    try {\n        console.log(`[TelegramLib LOG] Sending promo code creation notification to admin chat ID: ${chatId}`);\n        const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n        if (!result.success) {\n            console.error(`[TelegramLib LOG] Failed to send promo code creation notification to ${chatId}:`, result.message, result.error);\n        } else {\n            console.log(`[TelegramLib LOG] Promo code creation notification sent successfully to ${chatId}.`);\n        }\n    } catch (e) {\n        console.error(`[TelegramLib LOG] CRITICAL ERROR sending promo code creation notification to ${chatId}:`, e);\n    }\n  }\n}\n\nexport async function notifyAdminOnAdminLogin(adminUsername: string, ipAddress?: string) {\n    console.log(`[TelegramLib LOG] Attempting notifyAdminOnAdminLogin for admin: ${adminUsername}, IP: ${ipAddress}`);\n    const { telegramSettings, notificationPrefs } = await getTelegramSettingsFromDb();\n    if (!telegramSettings?.admin_bot_token || !telegramSettings.admin_bot_chat_ids || !notificationPrefs?.notify_admin_on_admin_login) {\n        console.log(\"[TelegramLib LOG] notifyAdminOnAdminLogin: Check failed - Bot token, chat IDs, or setting disabled.\");\n        return;\n    }\n    console.log(\"[TelegramLib LOG] notifyAdminOnAdminLogin: Settings OK. Proceeding to send.\");\n    const ipText = ipAddress ? `IP: \\`${escapeTelegramMarkdownV2(ipAddress)}\\`` : 'IP не определен';\n    const message = `🛡️ *Вход в Админ-панель*\nПользователь: \\`${escapeTelegramMarkdownV2(adminUsername)}\\`\n${ipText}\nВремя: \\`${escapeTelegramMarkdownV2(new Date().toLocaleString('ru-RU'))}\\``;\n\n    const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n    for (const chatId of chatIds) {\n        try {\n            console.log(`[TelegramLib LOG] Sending admin login notification to admin chat ID: ${chatId}`);\n            const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n            if (!result.success) {\n                console.error(`[TelegramLib LOG] Failed to send admin login notification to ${chatId}:`, result.message, result.error);\n            } else {\n                console.log(`[TelegramLib LOG] Admin login notification sent successfully to ${chatId}.`);\n            }\n        } catch (e) {\n            console.error(`[TelegramLib LOG] CRITICAL ERROR sending admin login notification to ${chatId}:`, e);\n        }\n    }\n}\n\nexport async function sendKeyActivationRequestToAdmin(\n  item: InventoryItemWithDetails,\n  user: Pick<User, 'id' | 'username'>\n): Promise<{ success: boolean; message?: string; error?: any }> {\n  console.log(`[TelegramLib LOG] Attempting sendKeyActivationRequestToAdmin for item ID: ${item.id}, user: ${user.username}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettingsFromDb();\n\n  const keyBotToken = telegramSettings?.key_bot_token;\n  const adminChatIdsString = telegramSettings?.key_bot_admin_chat_ids;\n\n  if (!keyBotToken) {\n    const errorMsg = \"[TelegramLib LOG] Key Bot token not configured in site_telegram_settings.\";\n    console.error(errorMsg);\n    return { success: false, message: errorMsg };\n  }\n  if (!adminChatIdsString) {\n    const errorMsg = \"[TelegramLib LOG] Key Bot admin chat IDs not configured in site_telegram_settings.\";\n    console.error(errorMsg);\n    return { success: false, message: errorMsg };\n  }\n\n  if (!notificationPrefs?.notify_admin_on_key_activation_request) {\n    const logMsg = \"[TelegramLib LOG] sendKeyActivationRequestToAdmin: Check failed - Notification type 'notify_admin_on_key_activation_request' is disabled.\";\n    console.log(logMsg);\n    return { success: true, message: \"Key activation request notification type disabled.\"};\n  }\n  console.log(\"[TelegramLib LOG] sendKeyActivationRequestToAdmin: Settings OK. Proceeding to send.\");\n\n  const productName = item.product_name || 'Неизвестный товар';\n  const duration = item.duration_days ? ` (${item.duration_days} дн.)` : '';\n  const mode = item.mode_label ? ` [${item.mode_label}]` : '';\n  const userKey = item.activation_code || 'Ключ не указан';\n\n  const message = `🔑 *Запрос на активацию ключа*\nПользователь: \\`${escapeTelegramMarkdownV2(user.username)}\\` (ID: \\`${user.id}\\`)\nТовар: \\`${escapeTelegramMarkdownV2(productName)}${escapeTelegramMarkdownV2(duration)}${escapeTelegramMarkdownV2(mode)}\\`\nИнвентарь ID: \\`${item.id}\\`\nПредоставленный ключ: \\`${escapeTelegramMarkdownV2(userKey)}\\``;\n\n  const inline_keyboard = [[\n    { text: '✅ Активировать', callback_data: `activate_key:${item.id}` },\n    { text: '❌ Отклонить', callback_data: `reject_key:${item.id}` },\n  ]];\n\n  const chatIds = adminChatIdsString.split(',').map(id => id.trim()).filter(id => id);\n  let allSentSuccessfully = true;\n  let firstErrorResult: { success: boolean; message?: string; error?: any } | null = null;\n\n  for (const chatId of chatIds) {\n    try {\n      console.log(`[TelegramLib LOG] Sending key activation request to key bot admin chat ID: ${chatId}`);\n      const result = await sendTelegramMessage(keyBotToken, chatId, message, 'MarkdownV2', { inline_keyboard });\n\n      if (!result.success) {\n        allSentSuccessfully = false;\n        if (!firstErrorResult) {\n          firstErrorResult = result;\n        }\n        console.error(`[TelegramLib LOG] Failed to send key activation request to ${chatId}:`, result.message, result.error);\n      } else {\n         console.log(`[TelegramLib LOG] Key activation request sent successfully to ${chatId}.`);\n      }\n    } catch (e: any) {\n        allSentSuccessfully = false;\n        if (!firstErrorResult) {\n            firstErrorResult = { success: false, message: `Network or parsing error for key activation: ${e.message}`, error: e };\n        }\n        console.error(`[TelegramLib LOG] CRITICAL ERROR sending key activation request to ${chatId}:`, e);\n    }\n  }\n  return allSentSuccessfully ? { success: true, message: \"Уведомление администратору отправлено.\"} : (firstErrorResult || { success: false, message: \"Неизвестная ошибка при отправке уведомлений администратору.\"});\n}\n\nexport { getTelegramSettingsFromDb };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 906, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase/product/route.ts"],"sourcesContent":["\n// src/app/api/purchase/product/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { User, ProductPricingOption, Product, SiteNotificationSettings, Referral } from '@/types';\nimport { sendPurchaseConfirmationEmail } from '@/lib/email';\nimport { notifyAdminOnProductPurchase } from '@/lib/telegram'; \n\nconst SETTINGS_ROW_ID = 1; \n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId, productId, productPricingOptionId } = await request.json();\n\n    if (!userId || !productId || !productPricingOptionId) {\n      return NextResponse.json({ message: 'Missing required fields' }, { status: 400 });\n    }\n\n    const usersFound = await query('SELECT * FROM users WHERE id = ?', [userId]);\n    if (usersFound.length === 0) {\n      return NextResponse.json({ message: 'User not found' }, { status: 404 });\n    }\n    const user: User = usersFound[0];\n    const currentBalance = typeof user.balance === 'string' ? parseFloat(user.balance) : user.balance;\n    const referredByUserId = user.referred_by_user_id;\n    const buyerUsername = user.username; \n\n    const pricingOptionsResults = await query('SELECT * FROM product_pricing_options WHERE id = ? AND product_id = ?', [productPricingOptionId, productId]);\n    if (pricingOptionsResults.length === 0) {\n      return NextResponse.json({ message: 'Pricing option not found or does not match product' }, { status: 404 });\n    }\n    const selectedOption: ProductPricingOption = {\n      ...pricingOptionsResults[0],\n      price_rub: parseFloat(pricingOptionsResults[0].price_rub),\n      price_gh: parseFloat(pricingOptionsResults[0].price_gh),\n      mode_label: pricingOptionsResults[0].mode_label, // Include mode_label\n    };\n\n    if (currentBalance < selectedOption.price_gh) {\n      return NextResponse.json({ message: `Недостаточно средств. Требуется ${selectedOption.price_gh.toFixed(2)} GH.`, currentBalance: currentBalance.toFixed(2) }, { status: 402 });\n    }\n    \n    const productsFound = await query('SELECT name, image_url FROM products WHERE id = ?', [productId]);\n    if (productsFound.length === 0) {\n        return NextResponse.json({ message: 'Product details not found for inventory logging.' }, { status: 404 });\n    }\n    const productDetails = productsFound[0] as Pick<Product, 'name' | 'image_url'>;\n    const productName = productDetails.name;\n    const productImageUrl = productDetails.image_url || null;\n\n    const newBalance = currentBalance - selectedOption.price_gh;\n    await query('UPDATE users SET balance = ? WHERE id = ?', [newBalance.toFixed(2), userId]);\n\n    const balanceTransactionResult = await query(\n      'INSERT INTO balance_transactions (user_id, transaction_type, amount_gh, description) VALUES (?, ?, ?, ?)',\n      [userId, 'purchase_product', -selectedOption.price_gh, `Покупка товара: ${productName} (${selectedOption.duration_days} дн.${selectedOption.mode_label ? `, ${selectedOption.mode_label}` : ''})`]\n    );\n    const balanceTransactionId = balanceTransactionResult.insertId;\n\n    const purchaseResult = await query(\n      'INSERT INTO purchases (user_id, product_id, product_pricing_option_id, amount_paid_gh, status, balance_transaction_id) VALUES (?, ?, ?, ?, ?, ?)',\n      [userId, productId, selectedOption.id, selectedOption.price_gh, 'completed', balanceTransactionId]\n    );\n    const purchaseId = purchaseResult.insertId; \n\n    let expiresAt: string | null = null;\n    if (selectedOption.duration_days) {\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + selectedOption.duration_days);\n      expiresAt = expiryDate.toISOString().slice(0, 19).replace('T', ' ');\n    }\n    const activationCode = `GH-PROD-${Date.now().toString().slice(-6)}`; \n\n    await query(\n      'INSERT INTO user_inventory (user_id, related_product_id, product_pricing_option_id, product_name, product_image_url, activation_code, expires_at, acquired_at, is_used, purchase_id) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), FALSE, ?)',\n      [userId, productId, productPricingOptionId, productName, productImageUrl, activationCode, expiresAt, purchaseId]\n    );\n    \n    let referralTransactionId: number | null = null;\n    if (referredByUserId) {\n      const referrerResults = await query('SELECT referral_percentage FROM users WHERE id = ?', [referredByUserId]);\n      if (referrerResults.length > 0) {\n        const referrerReferralPercentage = parseFloat(referrerResults[0].referral_percentage || '5.00'); \n        const rewardAmountGh = selectedOption.price_gh * (referrerReferralPercentage / 100);\n\n        if (rewardAmountGh > 0) {\n          await query(\n            'UPDATE users SET balance = balance + ? WHERE id = ?',\n            [rewardAmountGh.toFixed(2), referredByUserId]\n          );\n          const referralBonusTransactionResult = await query(\n            'INSERT INTO balance_transactions (user_id, transaction_type, amount_gh, description) VALUES (?, ?, ?, ?)',\n            [referredByUserId, 'referral_bonus', rewardAmountGh.toFixed(2), `Бонус за покупку реферала: ${buyerUsername} (${productName})`]\n          );\n          referralTransactionId = referralBonusTransactionResult.insertId;\n\n          await query(\n            'UPDATE referrals SET status = ?, reward_amount_gh = ?, reward_claimed_at = NOW(), reward_description = ?, related_balance_transaction_id = ? WHERE referred_user_id = ? AND referrer_user_id = ? AND status = ?',\n            ['completed', rewardAmountGh.toFixed(2), `Покупка: ${productName} (${selectedOption.duration_days} дн.${selectedOption.mode_label ? `, ${selectedOption.mode_label}` : ''})`, referralTransactionId, userId, referredByUserId, 'pending_purchase']\n          );\n        }\n      }\n    }\n    \n    const updatedUserResponse = await query('SELECT * FROM users WHERE id = ?', [userId]);\n    const updatedUser = updatedUserResponse[0];\n    if(updatedUser) {\n        updatedUser.balance = parseFloat(updatedUser.balance);\n        updatedUser.referral_percentage = parseFloat(updatedUser.referral_percentage);\n    }\n\n    try {\n      const notificationSettingsResults = await query('SELECT notify_on_product_purchase FROM site_notification_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n      if (notificationSettingsResults.length > 0 && Boolean(notificationSettingsResults[0].notify_on_product_purchase)) {\n        await sendPurchaseConfirmationEmail(user.email, user.username, productName, selectedOption.duration_days, selectedOption.price_gh);\n      }\n    } catch (emailError) {\n      console.error(\"Failed to send purchase confirmation email:\", emailError);\n    }\n\n    try {\n        await notifyAdminOnProductPurchase(user.id, user.username, productName, selectedOption.duration_days, selectedOption.price_gh);\n    } catch (telegramError) {\n        console.error(\"Failed to send Telegram admin notification for product purchase:\", telegramError);\n    }\n\n    return NextResponse.json({ \n        message: `Покупка \"${productName}\" (${selectedOption.duration_days} дн.${selectedOption.mode_label ? `, ${selectedOption.mode_label}` : ''}) успешна!`,\n        updatedUser \n    }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('API Product Purchase Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}