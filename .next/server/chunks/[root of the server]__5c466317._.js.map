{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/email.ts"],"sourcesContent":["\n// src/lib/email.ts\nimport nodemailer from 'nodemailer';\nimport { query } from '@/lib/mysql';\nimport type { SmtpSettings, SiteNotificationSettings } from '@/types';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst SETTINGS_ROW_ID = 1;\n\nasync function getSmtpSettings(): Promise<(SmtpSettings & { smtp_password?: string | null }) | null> {\n  try {\n    const results = await query('SELECT * FROM site_smtp_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    if (results.length > 0) {\n      return results[0];\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching SMTP settings for email:\", error);\n    return null;\n  }\n}\n\nasync function getNotificationSettings(): Promise<SiteNotificationSettings | null> {\n  try {\n    const results = await query('SELECT * FROM site_notification_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    if (results.length > 0) {\n      const settings = results[0];\n      return {\n        id: settings.id,\n        notify_on_registration: Boolean(settings.notify_on_registration),\n        notify_on_balance_deposit: Boolean(settings.notify_on_balance_deposit),\n        notify_on_product_purchase: Boolean(settings.notify_on_product_purchase),\n        notify_on_support_reply: Boolean(settings.notify_on_support_reply),\n        notify_on_software_activation: Boolean(settings.notify_on_software_activation),\n        notify_on_license_expiry_soon: Boolean(settings.notify_on_license_expiry_soon),\n        notify_on_promotions: Boolean(settings.notify_on_promotions),\n        updated_at: settings.updated_at,\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching notification settings for email:\", error);\n    return null;\n  }\n}\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  text: string;\n  html: string;\n}\n\nasync function renderEmailTemplate(templateName: string, data: Record<string, any>): Promise<string> {\n  try {\n    const baseTemplatePath = path.join(process.cwd(), 'src', 'emails', 'base-email-template.html');\n    const specificTemplatePath = path.join(process.cwd(), 'src', 'emails', `${templateName}.html`);\n\n    let baseTemplateContent = await fs.readFile(baseTemplatePath, 'utf-8');\n    let specificTemplateContent = await fs.readFile(specificTemplatePath, 'utf-8');\n\n    // Populate specific template\n    for (const key in data) {\n      specificTemplateContent = specificTemplateContent.replace(new RegExp(`{{${key}}}`, 'g'), String(data[key] === null || data[key] === undefined ? '' : data[key]));\n    }\n\n    // Populate base template\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{emailBody}}`, 'g'), specificTemplateContent);\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{emailTitle}}`, 'g'), String(data.emailTitle || data.subject || 'Уведомление от ' + (data.siteName || 'сайта')));\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{siteName}}`, 'g'), String(data.siteName || 'Green Hacks'));\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{currentYear}}`, 'g'), String(new Date().getFullYear()));\n    baseTemplateContent = baseTemplateContent.replace(new RegExp(`{{siteUrl}}`, 'g'), String(data.siteUrl || process.env.NEXT_PUBLIC_SITE_URL || '#'));\n    \n    return baseTemplateContent;\n  } catch (error) {\n    console.error(`Error rendering email template ${templateName}:`, error);\n    throw new Error(`Failed to render email template ${templateName}.`);\n  }\n}\n\n\nexport async function sendEmail(options: EmailOptions): Promise<{ success: boolean; message: string; error?: any }> {\n  const smtpConfig = await getSmtpSettings();\n\n  if (!smtpConfig || !smtpConfig.smtp_host || !smtpConfig.smtp_port || !smtpConfig.from_email) {\n    console.error(\"Email Service: SMTP settings are incomplete or not found.\");\n    return { success: false, message: \"SMTP settings are incomplete.\" };\n  }\n\n  const transporterOptions: nodemailer.TransportOptions = {\n    host: smtpConfig.smtp_host,\n    port: Number(smtpConfig.smtp_port),\n    secure: Number(smtpConfig.smtp_port) === 465 || smtpConfig.smtp_encryption === 'ssl',\n    auth: (smtpConfig.smtp_username && smtpConfig.smtp_password) ? {\n      user: smtpConfig.smtp_username,\n      pass: smtpConfig.smtp_password,\n    } : undefined,\n  };\n\n  if (smtpConfig.smtp_encryption === 'tls' && Number(smtpConfig.smtp_port) !== 465) {\n    transporterOptions.secure = false;\n    transporterOptions.requireTLS = true;\n  } else if (smtpConfig.smtp_encryption === 'none' && Number(smtpConfig.smtp_port) !== 465) {\n    transporterOptions.secure = false;\n    transporterOptions.ignoreTLS = true;\n  }\n\n  const transporter = nodemailer.createTransport(transporterOptions as any);\n\n  try {\n    await transporter.verify(); \n    console.log(`Email Service: Sending email to ${options.to} with subject \"${options.subject}\"`);\n    await transporter.sendMail({\n      from: `\"${smtpConfig.from_name || 'Green Hack'}\" <${smtpConfig.from_email}>`,\n      ...options,\n    });\n    return { success: true, message: `Email sent successfully to ${options.to}` };\n  } catch (error: any) {\n    console.error(\"Email Service: Error sending email:\", error);\n    return { success: false, message: `Failed to send email: ${error.message}`, error };\n  }\n}\n\nexport async function sendRegistrationWelcomeEmail(to: string, username: string) {\n  const notificationSettings = await getNotificationSettings();\n  if (!notificationSettings?.notify_on_registration) {\n    console.log(\"Email Service: Registration notifications are disabled.\");\n    return;\n  }\n\n  const smtpConfig = await getSmtpSettings();\n  const siteName = smtpConfig?.from_name || process.env.NEXT_PUBLIC_SITE_NAME || 'Green Hacks';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || '#';\n  const subject = `Добро пожаловать на ${siteName}, ${username}!`;\n\n  try {\n    const htmlBody = await renderEmailTemplate('registration', {\n      username: username,\n      siteName: siteName,\n      loginLink: `${siteUrl}/auth/login`,\n      emailTitle: subject,\n      subject: subject, // For placeholders if emailTitle is not directly used in specific template\n      siteUrl: siteUrl,\n    });\n\n    await sendEmail({\n      to,\n      subject: subject,\n      text: `Привет, ${username}!\\n\\nСпасибо за регистрацию на ${siteName}. Ваш аккаунт успешно создан.\\n\\nВаш логин: ${username}\\n\\nПерейти на сайт: ${siteUrl}\\nВойти в аккаунт: ${siteUrl}/auth/login\\n\\nС уважением,\\nКоманда ${siteName}`,\n      html: htmlBody,\n    });\n  } catch (error) {\n    console.error(\"Error preparing or sending registration welcome email:\", error);\n  }\n}\n\nexport async function sendPurchaseConfirmationEmail(to: string, username: string, productName: string, durationDays: number | null, amountPaidGh: number) {\n  const notificationSettings = await getNotificationSettings();\n  if (!notificationSettings?.notify_on_product_purchase) {\n    console.log(\"Email Service: Product purchase notifications are disabled.\");\n    return;\n  }\n\n  const smtpConfig = await getSmtpSettings();\n  const siteName = smtpConfig?.from_name || process.env.NEXT_PUBLIC_SITE_NAME || 'Green Hacks';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || '#';\n  const subject = `Подтверждение покупки на ${siteName}`;\n  const durationText = durationDays ? `${durationDays} дн.` : '';\n\n  try {\n    const htmlBody = await renderEmailTemplate('purchase-confirmation', {\n      username: username,\n      siteName: siteName,\n      productName: productName,\n      productDuration: durationText,\n      // productMode: '', // Placeholder, add if needed\n      amountPaidGh: amountPaidGh.toFixed(2),\n      purchaseDate: new Date().toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }),\n      inventoryLink: `${siteUrl}/account/inventory`,\n      emailTitle: subject,\n      subject: subject,\n      siteUrl: siteUrl,\n    });\n\n    await sendEmail({\n      to,\n      subject: subject,\n      text: `Привет, ${username}!\\n\\nВы успешно приобрели \"${productName}\"${durationText ? ` (${durationText})` : ''} за ${amountPaidGh.toFixed(2)} GH.\\n\\nТовар добавлен в ваш инвентарь: ${siteUrl}/account/inventory\\n\\nС уважением,\\nКоманда ${siteName}`,\n      html: htmlBody,\n    });\n  } catch (error) {\n    console.error(\"Error preparing or sending purchase confirmation email:\", error);\n  }\n}\n\nexport async function sendBalanceUpdateEmail(to: string, username: string, amountGh: number, reason: string, newBalance: number) {\n  const notificationSettings = await getNotificationSettings();\n  if (!notificationSettings?.notify_on_balance_deposit) { \n    console.log(\"Email Service: Balance update notifications are disabled.\");\n    return;\n  }\n  \n  const smtpConfig = await getSmtpSettings();\n  const siteName = smtpConfig?.from_name || process.env.NEXT_PUBLIC_SITE_NAME || 'Green Hacks';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || '#';\n  const subject = `Обновление баланса на ${siteName}`;\n  const actionText = amountGh > 0 ? \"пополнен\" : \"изменен\";\n  const amountText = amountGh > 0 ? `+${amountGh.toFixed(2)} GH` : `${amountGh.toFixed(2)} GH`;\n\n  try {\n    const htmlBody = await renderEmailTemplate('balance-topup', {\n        username: username,\n        siteName: siteName,\n        topUpAmountGh: amountText,\n        paymentMethod: reason, // Using reason as payment method for simplicity\n        topUpDate: new Date().toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }),\n        newBalanceGh: newBalance.toFixed(2),\n        accountBalanceLink: `${siteUrl}/account/balance`,\n        emailTitle: subject,\n        subject: subject,\n        siteUrl: siteUrl,\n    });\n\n    await sendEmail({\n      to,\n      subject: subject,\n      text: `Привет, ${username}!\\n\\nВаш баланс был ${actionText} на ${amountText}. Причина: ${reason}.\\nНовый баланс: ${newBalance.toFixed(2)} GH.\\n\\nС уважением,\\nКоманда ${siteName}`,\n      html: htmlBody,\n    });\n  } catch (error) {\n    console.error(\"Error preparing or sending balance update email:\", error);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/register/route.ts"],"sourcesContent":["\n// src/app/api/auth/register/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport bcrypt from 'bcryptjs';\nimport type { OkPacket, ResultSetHeader } from 'mysql2'; \nimport type { User, SiteNotificationSettings } from '@/types';\nimport { sendRegistrationWelcomeEmail } from '@/lib/email'; \n\nconst SETTINGS_ROW_ID = 1; \n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, username, password, referralCode: providedReferralCode } = await request.json();\n\n    if (!email || !username || !password) {\n      return NextResponse.json({ message: 'Missing required fields (email, username, password)' }, { status: 400 });\n    }\n\n    if (password.length < 6) {\n      return NextResponse.json({ message: 'Password must be at least 6 characters long' }, { status: 400 });\n    }\n\n    try {\n      const existingUserByEmail = await query('SELECT id FROM users WHERE email = ?', [email]);\n      if (Array.isArray(existingUserByEmail) && existingUserByEmail.length > 0) {\n        return NextResponse.json({ message: 'Пользователь с таким email уже существует.' }, { status: 409 });\n      }\n      const existingUserByUsername = await query('SELECT id FROM users WHERE username = ?', [username]);\n       if (Array.isArray(existingUserByUsername) && existingUserByUsername.length > 0) {\n        return NextResponse.json({ message: 'Пользователь с таким логином уже существует.' }, { status: 409 });\n      }\n    } catch (checkError: any) {\n        console.error('API Error checking existing user:', checkError);\n        return NextResponse.json({ message: `Database error during user check: ${checkError.message}` }, { status: 500 });\n    }\n    \n    let referredByUserId: number | null = null;\n    if (providedReferralCode) {\n      const referrerResult = await query('SELECT id FROM users WHERE referral_code = ?', [providedReferralCode]);\n      if (Array.isArray(referrerResult) && referrerResult.length > 0) {\n        referredByUserId = referrerResult[0].id;\n      }\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newReferralCode = `GH-${username.toUpperCase().slice(0,5)}${Date.now().toString().slice(-4)}`;\n    const userBalance = 0.00;\n    const defaultReferralPercentage = 5.00; // Default referral percentage for new users\n\n    const result = await query(\n      'INSERT INTO users (email, username, password_hash, role, balance, referral_code, referred_by_user_id, referral_percentage) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\n      [email, username, hashedPassword, 'client', userBalance, newReferralCode, referredByUserId, defaultReferralPercentage] \n    );\n    \n    const insertResult = result as OkPacket | ResultSetHeader | any[];\n\n    let insertId;\n    if (Array.isArray(insertResult) && insertResult.length > 0 && 'insertId' in insertResult[0]) {\n        insertId = insertResult[0].insertId;\n    } else if (insertResult && 'insertId' in insertResult) { \n        insertId = (insertResult as OkPacket).insertId; \n    }\n\n    if (insertId) {\n      const newUser: Partial<User> = { \n        id: insertId, \n        email, \n        username, \n        role: 'client', \n        balance: userBalance, \n        referral_code: newReferralCode,\n        referred_by_user_id: referredByUserId,\n        referral_percentage: defaultReferralPercentage \n      };\n      \n      if (referredByUserId) {\n        await query(\n          'INSERT INTO referrals (referrer_user_id, referred_user_id, status) VALUES (?, ?, ?)',\n          [referredByUserId, insertId, 'pending_purchase']\n        );\n      }\n\n      try {\n        const notificationSettingsResults = await query('SELECT notify_on_registration FROM site_notification_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n        if (notificationSettingsResults.length > 0 && Boolean(notificationSettingsResults[0].notify_on_registration)) {\n          await sendRegistrationWelcomeEmail(email, username);\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send registration email:\", emailError);\n      }\n\n      return NextResponse.json({ message: 'User registered successfully', user: newUser }, { status: 201 });\n    } else {\n      console.error('User registration in DB failed, no insertId:', result);\n      return NextResponse.json({ message: 'Failed to register user in DB.' }, { status: 500 });\n    }\n\n  } catch (error: any) {\n    console.error('API Error processing registration request:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}