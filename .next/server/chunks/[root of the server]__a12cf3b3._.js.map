{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-banners/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-banners/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SiteBanner } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\n// GET all active banners, ordered by item_order\nexport async function GET(request: NextRequest) {\n  try {\n    // TODO: Add admin authentication check if this endpoint is only for admin use\n    // If it's for public site display, no auth check needed here.\n    const results = await query(\n      `SELECT \n         sb.*, \n         g.name as game_name \n       FROM site_banners sb\n       LEFT JOIN games g ON sb.game_slug = g.slug\n       WHERE sb.is_active = TRUE\n       ORDER BY sb.item_order ASC, sb.id DESC`\n    );\n    const banners: SiteBanner[] = results.map((row: any) => ({\n      ...row,\n      is_active: Boolean(row.is_active),\n      game_name: row.game_name, // Ensure game_name is included\n    }));\n    return NextResponse.json(banners);\n  } catch (error: any) {\n    console.error('API Admin Banners GET Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n// POST new banner\nexport async function POST(request: NextRequest) {\n  // TODO: Add admin authentication\n  try {\n    const body = await request.json();\n    const {\n      title, subtitle, description, image_url, image_alt_text,\n      button_text, button_link, item_order, is_active,\n      hero_image_object_position, hero_image_hint, price_text, game_slug,\n      related_product_slug_1, related_product_slug_2, related_product_slug_3\n    } = body;\n\n    if (!title || !image_url) {\n      return NextResponse.json({ message: 'Title and Image URL are required.' }, { status: 400 });\n    }\n\n    const insertQuery = `\n      INSERT INTO site_banners (\n        title, subtitle, description, image_url, image_alt_text,\n        button_text, button_link, item_order, is_active,\n        hero_image_object_position, hero_image_hint, price_text, game_slug,\n        related_product_slug_1, related_product_slug_2, related_product_slug_3,\n        created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n    `;\n    const params = [\n      title, subtitle || null, description || null, image_url, image_alt_text || null,\n      button_text || null, button_link || null,\n      item_order !== undefined ? parseInt(item_order, 10) : 0,\n      is_active === undefined ? true : Boolean(is_active),\n      hero_image_object_position || 'center center', hero_image_hint || null, price_text || null, game_slug || null,\n      related_product_slug_1 || null, related_product_slug_2 || null, related_product_slug_3 || null\n    ];\n\n    const result = await query(insertQuery, params) as OkPacket | ResultSetHeader | any[];\n    \n    let insertId;\n    if (Array.isArray(result) && result.length > 0 && 'insertId' in result[0]) {\n        insertId = result[0].insertId;\n    } else if (result && 'insertId' in result) { \n        insertId = (result as OkPacket).insertId; \n    }\n\n    if (insertId) {\n      const newBannerResult = await query('SELECT * FROM site_banners WHERE id = ?', [insertId]);\n      const newBanner: SiteBanner = {\n        ...newBannerResult[0],\n        is_active: Boolean(newBannerResult[0].is_active)\n      };\n      return NextResponse.json({ message: 'Баннер успешно создан', banner: newBanner }, { status: 201 });\n    } else {\n      console.error('Banner creation in DB failed:', result);\n      return NextResponse.json({ message: 'Не удалось создать баннер в базе данных.' }, { status: 500 });\n    }\n  } catch (error: any) {\n    console.error('API Admin Banners POST Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n    \n    \n"],"names":[],"mappings":"AACA,0CAA0C;;;;;AAC1C;AACA;;;AAKO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,8EAA8E;QAC9E,8DAA8D;QAC9D,MAAM,UAAU,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACxB,CAAC;;;;;;6CAMsC,CAAC;QAE1C,MAAM,UAAwB,QAAQ,GAAG,CAAC,CAAC,MAAa,CAAC;gBACvD,GAAG,GAAG;gBACN,WAAW,QAAQ,IAAI,SAAS;gBAChC,WAAW,IAAI,SAAS;YAC1B,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,iCAAiC;IACjC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,cAAc,EACvD,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAC/C,0BAA0B,EAAE,eAAe,EAAE,UAAU,EAAE,SAAS,EAClE,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EACvE,GAAG;QAEJ,IAAI,CAAC,SAAS,CAAC,WAAW;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QAEA,MAAM,cAAc,CAAC;;;;;;;;IAQrB,CAAC;QACD,MAAM,SAAS;YACb;YAAO,YAAY;YAAM,eAAe;YAAM;YAAW,kBAAkB;YAC3E,eAAe;YAAM,eAAe;YACpC,eAAe,YAAY,SAAS,YAAY,MAAM;YACtD,cAAc,YAAY,OAAO,QAAQ;YACzC,8BAA8B;YAAiB,mBAAmB;YAAM,cAAc;YAAM,aAAa;YACzG,0BAA0B;YAAM,0BAA0B;YAAM,0BAA0B;SAC3F;QAED,MAAM,SAAS,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,aAAa;QAExC,IAAI;QACJ,IAAI,MAAM,OAAO,CAAC,WAAW,OAAO,MAAM,GAAG,KAAK,cAAc,MAAM,CAAC,EAAE,EAAE;YACvE,WAAW,MAAM,CAAC,EAAE,CAAC,QAAQ;QACjC,OAAO,IAAI,UAAU,cAAc,QAAQ;YACvC,WAAW,AAAC,OAAoB,QAAQ;QAC5C;QAEA,IAAI,UAAU;YACZ,MAAM,kBAAkB,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,2CAA2C;gBAAC;aAAS;YACzF,MAAM,YAAwB;gBAC5B,GAAG,eAAe,CAAC,EAAE;gBACrB,WAAW,QAAQ,eAAe,CAAC,EAAE,CAAC,SAAS;YACjD;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAyB,QAAQ;YAAU,GAAG;gBAAE,QAAQ;YAAI;QAClG,OAAO;YACL,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2C,GAAG;gBAAE,QAAQ;YAAI;QAClG;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF","debugId":null}}]
}