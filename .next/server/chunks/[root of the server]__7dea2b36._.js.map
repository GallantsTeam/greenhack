{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-settings/payment/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-settings/payment/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SitePaymentGatewaySettings } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nconst SETTINGS_ROW_ID = 1;\n\nexport async function GET(request: NextRequest) {\n  try {\n    const results = await query('SELECT * FROM site_payment_gateway_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    \n    if (!Array.isArray(results) || results.length === 0) {\n      // If no settings row exists, attempt to insert default and then fetch again or return defaults\n      await query('INSERT IGNORE INTO site_payment_gateway_settings (id, gateway_name, yoomoney_webhook_url, is_test_mode_active, yoomoney_notify_payment_succeeded, yoomoney_notify_payment_waiting_for_capture, yoomoney_notify_payment_canceled, yoomoney_notify_refund_succeeded) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', \n      [SETTINGS_ROW_ID, 'yoomoney', '/api/payment/yoomoney-webhook', true, true, false, true, true]);\n      \n      const newResults = await query('SELECT * FROM site_payment_gateway_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n      if (!Array.isArray(newResults) || newResults.length === 0){\n         return NextResponse.json({ message: \"Failed to initialize and fetch payment settings\" }, { status: 500 });\n      }\n      const settingsFromDb = newResults[0];\n      const { yoomoney_secret_key: _, ...settingsToReturn } = settingsFromDb;\n      return NextResponse.json({\n        ...settingsToReturn,\n        is_test_mode_active: Boolean(settingsToReturn.is_test_mode_active),\n        yoomoney_notify_payment_succeeded: Boolean(settingsToReturn.yoomoney_notify_payment_succeeded),\n        yoomoney_notify_payment_waiting_for_capture: Boolean(settingsToReturn.yoomoney_notify_payment_waiting_for_capture),\n        yoomoney_notify_payment_canceled: Boolean(settingsToReturn.yoomoney_notify_payment_canceled),\n        yoomoney_notify_refund_succeeded: Boolean(settingsToReturn.yoomoney_notify_refund_succeeded),\n      });\n    }\n    \n    const settingsFromDb = results[0];\n    const { yoomoney_secret_key, ...settingsToReturn } = settingsFromDb; \n    \n    const processedSettings: Partial<SitePaymentGatewaySettings> = { \n        ...settingsToReturn,\n        is_test_mode_active: Boolean(settingsToReturn.is_test_mode_active),\n        yoomoney_notify_payment_succeeded: Boolean(settingsToReturn.yoomoney_notify_payment_succeeded),\n        yoomoney_notify_payment_waiting_for_capture: Boolean(settingsToReturn.yoomoney_notify_payment_waiting_for_capture),\n        yoomoney_notify_payment_canceled: Boolean(settingsToReturn.yoomoney_notify_payment_canceled),\n        yoomoney_notify_refund_succeeded: Boolean(settingsToReturn.yoomoney_notify_refund_succeeded),\n    };\n\n    return NextResponse.json(processedSettings);\n  } catch (error: any) {\n    console.error('API Admin Payment Settings GET Error:', error);\n    if (error.code === 'ER_NO_SUCH_TABLE') {\n        try {\n            // Attempt to create and insert default if table doesn't exist\n            await query(`\n                CREATE TABLE IF NOT EXISTS site_payment_gateway_settings (\n                    id INT NOT NULL DEFAULT 1, gateway_name VARCHAR(50) DEFAULT 'yoomoney',\n                    yoomoney_shop_id VARCHAR(255) NULL, yoomoney_secret_key VARCHAR(255) NULL,\n                    yoomoney_webhook_url VARCHAR(255) NULL DEFAULT '/api/payment/yoomoney-webhook',\n                    yoomoney_notify_payment_succeeded BOOLEAN NOT NULL DEFAULT TRUE,\n                    yoomoney_notify_payment_waiting_for_capture BOOLEAN NOT NULL DEFAULT FALSE,\n                    yoomoney_notify_payment_canceled BOOLEAN NOT NULL DEFAULT TRUE,\n                    yoomoney_notify_refund_succeeded BOOLEAN NOT NULL DEFAULT TRUE,\n                    is_test_mode_active BOOLEAN NOT NULL DEFAULT TRUE,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n                    PRIMARY KEY (id), CONSTRAINT pk_site_payment_gateway_settings_id_is_1 CHECK (id = 1)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;\n            `);\n            await query('INSERT IGNORE INTO site_payment_gateway_settings (id, is_test_mode_active) VALUES (1, TRUE)');\n            const defaultSettings: SitePaymentGatewaySettings = {\n                id: SETTINGS_ROW_ID, gateway_name: 'yoomoney', yoomoney_shop_id: null, yoomoney_secret_key: null,\n                yoomoney_webhook_url: '/api/payment/yoomoney-webhook', yoomoney_notify_payment_succeeded: true,\n                yoomoney_notify_payment_waiting_for_capture: false, yoomoney_notify_payment_canceled: true,\n                yoomoney_notify_refund_succeeded: true, is_test_mode_active: true,\n            };\n            return NextResponse.json(defaultSettings, { status: 200 });\n        } catch (dbCreateError) {\n             console.error('API Admin Payment Settings DB Create Error:', dbCreateError);\n             return NextResponse.json({ message: `Internal Server Error: Failed to create settings table.` }, { status: 500 });\n        }\n    }\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { \n      yoomoney_shop_id, yoomoney_secret_key, \n      yoomoney_notify_payment_succeeded, yoomoney_notify_payment_waiting_for_capture,\n      yoomoney_notify_payment_canceled, yoomoney_notify_refund_succeeded,\n      is_test_mode_active \n    } = body;\n\n    const updateFields: string[] = [];\n    const queryParams: any[] = [];\n\n    const addField = (fieldValue: any, fieldName: string) => {\n      if (fieldValue !== undefined) { // Allow false values for booleans\n        updateFields.push(`${fieldName} = ?`);\n        queryParams.push(fieldValue === '' ? null : fieldValue);\n      }\n    };\n    \n    console.log(\"Received is_test_mode_active in PUT:\", is_test_mode_active, typeof is_test_mode_active);\n\n\n    addField(yoomoney_shop_id, 'yoomoney_shop_id');\n    if (yoomoney_secret_key !== undefined) { // Allow clearing the secret key\n        if (yoomoney_secret_key && yoomoney_secret_key.trim() !== '') {\n            addField(yoomoney_secret_key, 'yoomoney_secret_key');\n        } else if (yoomoney_secret_key === ''){ // If explicitly empty string, set to NULL\n             addField(null, 'yoomoney_secret_key');\n        }\n        // If yoomoney_secret_key is undefined, it won't be added to updateFields\n    }\n    addField(Boolean(yoomoney_notify_payment_succeeded), 'yoomoney_notify_payment_succeeded');\n    addField(Boolean(yoomoney_notify_payment_waiting_for_capture), 'yoomoney_notify_payment_waiting_for_capture');\n    addField(Boolean(yoomoney_notify_payment_canceled), 'yoomoney_notify_payment_canceled');\n    addField(Boolean(yoomoney_notify_refund_succeeded), 'yoomoney_notify_refund_succeeded');\n    addField(Boolean(is_test_mode_active), 'is_test_mode_active'); // Ensure boolean conversion\n    \n    if (updateFields.length === 0) {\n      return NextResponse.json({ message: 'Настройки не изменены (нет данных для обновления).' }, { status: 200 });\n    }\n\n    // Ensure the row exists with id=1 before updating\n    await query('INSERT IGNORE INTO site_payment_gateway_settings (id) VALUES (?)', [SETTINGS_ROW_ID]);\n\n    const updateQuery = `\n      UPDATE site_payment_gateway_settings \n      SET ${updateFields.join(', ')}, updated_at = NOW()\n      WHERE id = ?\n    `;\n    queryParams.push(SETTINGS_ROW_ID);\n    \n    console.log(\"Executing SQL:\", updateQuery, queryParams);\n    await query(updateQuery, queryParams);\n\n    const updatedSettingsResults = await query('SELECT * FROM site_payment_gateway_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    const { yoomoney_secret_key: _, ...settingsToReturn } = updatedSettingsResults[0]; \n\n    return NextResponse.json({ message: 'Настройки платежного шлюза успешно обновлены.', settings: {\n        ...settingsToReturn,\n        is_test_mode_active: Boolean(settingsToReturn.is_test_mode_active)\n    } }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('API Admin Payment Settings PUT Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n    \n    "],"names":[],"mappings":"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","debugId":null}}]
}