{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/products/%5Bslug%5D/reviews/route.ts"],"sourcesContent":["\n// src/app/api/products/[slug]/reviews/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { Review } from '@/types';\nimport type { OkPacket } from 'mysql2';\n\n// GET approved reviews for a specific product\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { slug: string } }\n) {\n  const productSlug = params.slug;\n\n  if (!productSlug) {\n    return NextResponse.json({ message: 'Product slug is required' }, { status: 400 });\n  }\n\n  try {\n    // Fetch product ID from slug first\n    const productResults = await query('SELECT id FROM products WHERE slug = ?', [productSlug]);\n    if (productResults.length === 0) {\n      return NextResponse.json({ message: 'Product not found' }, { status: 404 });\n    }\n    const productId = productResults[0].id;\n\n    const results = await query(\n      `SELECT \n         r.id, r.user_id, r.product_id, r.rating, r.text, r.status, r.created_at, r.updated_at, r.approved_at,\n         r.product_pricing_option_id,\n         u.username, u.avatar_url as user_avatar_url,\n         p.name as product_name, p.slug as product_slug, p.image_url as product_image_url,\n         ppo.duration_days\n       FROM reviews r\n       JOIN users u ON r.user_id = u.id\n       JOIN products p ON r.product_id = p.id\n       LEFT JOIN product_pricing_options ppo ON r.product_pricing_option_id = ppo.id\n       WHERE r.product_id = ? AND r.status = 'approved'\n       ORDER BY r.approved_at DESC, r.created_at DESC`,\n      [productId]\n    );\n    \n    const reviews: Review[] = results.map((row: any) => ({\n      id: row.id,\n      user_id: row.user_id,\n      username: row.username,\n      user_avatar_url: row.user_avatar_url || `https://placehold.co/40x40.png?text=${row.username ? row.username[0].toUpperCase() : 'U'}`,\n      product_id: row.product_id,\n      product_name: row.product_name,\n      product_slug: row.product_slug,\n      product_image_url: row.product_image_url,\n      product_pricing_option_id: row.product_pricing_option_id,\n      duration_days: row.duration_days ? parseInt(row.duration_days, 10) : null,\n      rating: row.rating,\n      text: row.text,\n      status: row.status,\n      created_at: row.created_at,\n      updated_at: row.updated_at,\n      approved_at: row.approved_at,\n    }));\n\n    return NextResponse.json(reviews);\n  } catch (error: any) {\n    console.error(`API Product Reviews GET Error (Slug: ${productSlug}):`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n// POST a new review for a specific product\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { slug: string } }\n) {\n  const productSlug = params.slug;\n\n  if (!productSlug) {\n    return NextResponse.json({ message: 'Product slug is required' }, { status: 400 });\n  }\n  \n  try {\n    const body = await request.json();\n    const { userId, rating, text, productPricingOptionId } = body;\n\n    if (!userId || !rating || !text) {\n      return NextResponse.json({ message: 'User ID, Rating, and Text are required.' }, { status: 400 });\n    }\n    if (rating < 1 || rating > 5) {\n        return NextResponse.json({ message: 'Rating must be between 1 and 5.' }, { status: 400 });\n    }\n\n    // Fetch product ID from slug first\n    const productResults = await query('SELECT id FROM products WHERE slug = ?', [productSlug]);\n    if (productResults.length === 0) {\n      return NextResponse.json({ message: 'Product not found' }, { status: 404 });\n    }\n    const productId = productResults[0].id;\n\n    // TODO: Add check if user has purchased this product or specific pricing option to allow review\n    // For now, allow any logged-in user to review any product\n\n    const insertQuery = `\n      INSERT INTO reviews (user_id, product_id, product_pricing_option_id, rating, text, status, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, 'pending', NOW(), NOW())\n    `;\n    const queryParams = [userId, productId, productPricingOptionId || null, rating, text];\n\n    const result = await query(insertQuery, queryParams) as OkPacket;\n\n    if (result.affectedRows > 0) {\n      return NextResponse.json({ message: 'Отзыв успешно отправлен на модерацию.' }, { status: 201 });\n    } else {\n      return NextResponse.json({ message: 'Не удалось сохранить отзыв.' }, { status: 500 });\n    }\n  } catch (error: any) {\n    console.error(`API Product Reviews POST Error (Slug: ${productSlug}):`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}