{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-settings/smtp/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-settings/smtp/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SmtpSettings } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nconst SETTINGS_ROW_ID = 1; // All SMTP settings are in a single row with id=1\n\nexport async function GET(request: NextRequest) {\n  // TODO: Add admin authentication check\n  try {\n    const results = await query('SELECT * FROM site_smtp_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    \n    if (!Array.isArray(results) || results.length === 0) {\n      // Return default/empty if no settings found, but the row should exist due to INSERT IGNORE\n      const defaultSmtpSettings: SmtpSettings = {\n        id: SETTINGS_ROW_ID,\n        smtp_host: null,\n        smtp_port: 587, // Common default\n        smtp_username: null,\n        smtp_password: null, // Never send password to client\n        smtp_encryption: 'tls', // Common default\n        from_email: null,\n        from_name: null,\n      };\n      return NextResponse.json(defaultSmtpSettings);\n    }\n    \n    const settingsFromDb = results[0];\n    // Exclude password when sending to client\n    const { smtp_password, ...settingsToReturn } = settingsFromDb;\n    \n    const processedSettings: SmtpSettings = {\n        ...settingsToReturn,\n        smtp_port: settingsToReturn.smtp_port !== null ? parseInt(settingsToReturn.smtp_port, 10) : null,\n        // smtp_encryption should already be of the correct enum type\n    };\n\n    return NextResponse.json(processedSettings);\n  } catch (error: any) {\n    console.error('API Admin SMTP Settings GET Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  // TODO: Add admin authentication check\n  try {\n    const body = await request.json();\n    const { \n      smtp_host, smtp_port, smtp_username, smtp_password, \n      smtp_encryption, from_email, from_name \n    } = body;\n\n    // Prepare fields and params for update\n    const updateFields: string[] = [];\n    const queryParams: any[] = [];\n\n    const addField = (fieldValue: any, fieldName: string) => {\n      if (fieldValue !== undefined) {\n        updateFields.push(`${fieldName} = ?`);\n        queryParams.push(fieldValue === '' ? null : fieldValue); // Allow clearing fields\n      }\n    };\n\n    addField(smtp_host, 'smtp_host');\n    addField(smtp_port, 'smtp_port');\n    addField(smtp_username, 'smtp_username');\n    // Only update password if a new one is provided\n    if (smtp_password && smtp_password.trim() !== '') {\n        // In a real app, you'd encrypt this before storing or store in a secure vault\n        updateFields.push('smtp_password = ?');\n        queryParams.push(smtp_password); \n    }\n    addField(smtp_encryption, 'smtp_encryption');\n    addField(from_email, 'from_email');\n    addField(from_name, 'from_name');\n\n    if (updateFields.length === 0 && !(smtp_password && smtp_password.trim() !== '')) {\n        // If no fields are to be updated and password is also not being updated\n        const currentSettings = await query('SELECT * FROM site_smtp_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n        if (currentSettings.length > 0) {\n            const { smtp_password: _, ...settingsToReturn } = currentSettings[0];\n            return NextResponse.json({ message: 'Настройки SMTP не изменены.', settings: settingsToReturn }, { status: 200 });\n        }\n        return NextResponse.json({ message: 'Настройки SMTP не найдены для обновления.' }, { status: 404 });\n    }\n\n\n    const updateQuery = `\n      UPDATE site_smtp_settings \n      SET ${updateFields.join(', ')}\n      WHERE id = ?\n    `;\n    queryParams.push(SETTINGS_ROW_ID);\n    \n    const result = await query(updateQuery, queryParams) as OkPacket | ResultSetHeader | any[];\n\n    let affectedRows = 0;\n    if (result && ('affectedRows' in result)) {\n        affectedRows = (result as OkPacket).affectedRows;\n    } else if (Array.isArray(result) && result.length > 0 && 'affectedRows' in result[0]) {\n        affectedRows = result[0].affectedRows;\n    }\n    \n    const updatedSettingsResults = await query('SELECT * FROM site_smtp_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    const { smtp_password: _, ...settingsToReturn } = updatedSettingsResults[0];\n\n\n    return NextResponse.json({ message: 'SMTP настройки успешно обновлены.', settings: settingsToReturn }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('API Admin SMTP Settings PUT Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}