{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/inventory/activate/route.ts"],"sourcesContent":["\n// src/app/api/inventory/activate/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { InventoryItemWithDetails } from '@/types';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId, inventoryItemId } = await request.json();\n    console.log('[API Activate] Received request:', { userId, inventoryItemId });\n\n    if (!userId || !inventoryItemId) {\n      console.log('[API Activate] Missing userId or inventoryItemId');\n      return NextResponse.json({ message: 'Missing userId or inventoryItemId' }, { status: 400 });\n    }\n\n    // Updated SQL query\n    const inventoryItemResults = await query(\n      `SELECT \n         ui.*,\n         p.name as product_name_from_product_table,\n         COALESCE(ppo.duration_days, cp.duration_days) as resolved_duration_days,\n         ppo.mode_label as pricing_option_mode_label -- mode_label comes only from ppo\n       FROM user_inventory ui\n       LEFT JOIN products p ON ui.related_product_id = p.id\n       LEFT JOIN product_pricing_options ppo ON ui.product_pricing_option_id = ppo.id\n       LEFT JOIN case_prizes cp ON ui.case_prize_id = cp.id\n       WHERE ui.id = ? AND ui.user_id = ?`,\n      [inventoryItemId, userId]\n    );\n\n    if (inventoryItemResults.length === 0) {\n      console.log(`[API Activate] Item not found for user ${userId}, item ID ${inventoryItemId}`);\n      return NextResponse.json({ message: 'Предмет не найден в инвентаре или не принадлежит вам.' }, { status: 404 });\n    }\n    \n    const itemToActivateDb = inventoryItemResults[0];\n    console.log('[API Activate] Found item in DB:', itemToActivateDb);\n\n    // Updated item mapping\n    const itemToActivate: InventoryItemWithDetails = {\n        ...itemToActivateDb,\n        product_name: itemToActivateDb.product_name || itemToActivateDb.product_name_from_product_table || 'Неизвестный продукт',\n        is_used: Boolean(itemToActivateDb.is_used),\n        duration_days: itemToActivateDb.resolved_duration_days ? parseInt(itemToActivateDb.resolved_duration_days, 10) : null,\n        mode_label: itemToActivateDb.pricing_option_mode_label || null, // Correctly use only ppo.mode_label\n        activation_status: itemToActivateDb.activation_status || 'available',\n    };\n\n\n    if (itemToActivate.is_used) {\n      console.log(`[API Activate] Item ${inventoryItemId} already used.`);\n      return NextResponse.json({ message: 'Этот предмет уже был активирован.' }, { status: 400 });\n    }\n\n    if (!itemToActivate.related_product_id && itemToActivate.case_prize_id) {\n        console.log(`[API Activate] Item ${inventoryItemId} is a non-product prize (e.g., balance), marking as used.`);\n        await query(\n            'UPDATE user_inventory SET is_used = TRUE, activated_at = NOW() WHERE id = ?',\n            [inventoryItemId]\n        );\n        return NextResponse.json({ message: `${itemToActivate.product_name} помечен как использованный.` }, { status: 200 });\n    }\n    \n    if (!itemToActivate.related_product_id) {\n      console.log(`[API Activate] Item ${inventoryItemId} has no related_product_id and is not a direct case_prize_id activation. Cannot determine license type.`);\n      return NextResponse.json({ message: 'Невозможно активировать этот тип предмета как лицензию (отсутствует ID продукта).' }, { status: 400 });\n    }\n\n\n    let expiresAt: string | null = null;\n    const activatedAt = new Date(); \n\n    console.log(`[API Activate] Item duration_days: ${itemToActivate.duration_days}`);\n\n    if (itemToActivate.duration_days && itemToActivate.duration_days > 0) {\n      const expiryDate = new Date(activatedAt);\n      expiryDate.setDate(expiryDate.getDate() + itemToActivate.duration_days);\n      expiresAt = expiryDate.toISOString().slice(0, 19).replace('T', ' '); \n      console.log(`[API Activate] Calculated expiresAt: ${expiresAt}`);\n    } else {\n      console.log(`[API Activate] No duration or duration is 0, expiresAt will be NULL (permanent).`);\n    }\n\n    await query(\n      'UPDATE user_inventory SET is_used = TRUE, activated_at = ?, expires_at = ? WHERE id = ?',\n      [activatedAt.toISOString().slice(0, 19).replace('T', ' '), expiresAt, inventoryItemId]\n    );\n    console.log(`[API Activate] Item ${inventoryItemId} updated successfully.`);\n\n    return NextResponse.json({ message: `${itemToActivate.product_name} успешно активирован!` }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('[API Inventory Activate Error]:', error);\n    // Check if the error is a MySQL error and has a code\n    if (error.code && error.sqlMessage) {\n        return NextResponse.json({ message: `Ошибка базы данных: ${error.sqlMessage} (Код: ${error.code})` }, { status: 500 });\n    }\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}