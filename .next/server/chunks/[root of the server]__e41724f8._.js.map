{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/user/%5BuserId%5D/purchase-history/route.ts"],"sourcesContent":["\n// src/app/api/user/[userId]/purchase-history/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { Purchase } from '@/types'; \n\ninterface PurchaseHistoryItem extends Purchase {\n  product_name?: string;\n  product_pricing_option_duration_days?: number | null; \n  product_pricing_option_mode_label?: string | null; // Changed from is_pvp\n  description?: string; \n}\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { userId: string } }\n) {\n  const userId = params.userId;\n\n  if (!userId || isNaN(parseInt(userId))) {\n    return NextResponse.json({ message: 'Valid User ID is required' }, { status: 400 });\n  }\n\n  try {\n    const results = await query(\n      `SELECT \n         p.id, \n         p.user_id, \n         p.product_id, \n         p.product_pricing_option_id, \n         p.purchase_date, \n         p.amount_paid_gh, \n         p.status,\n         prod.name as product_name,\n         ppo.duration_days as product_pricing_option_duration_days,\n         ppo.mode_label as product_pricing_option_mode_label, \n         bt.description\n       FROM purchases p\n       LEFT JOIN products prod ON p.product_id = prod.id \n       LEFT JOIN product_pricing_options ppo ON p.product_pricing_option_id = ppo.id\n       LEFT JOIN balance_transactions bt ON p.balance_transaction_id = bt.id \n       WHERE p.user_id = ?\n       ORDER BY p.purchase_date DESC`,\n      [parseInt(userId)]\n    );\n\n    const purchaseHistory: PurchaseHistoryItem[] = results.map((row: any) => ({\n      id: row.id,\n      user_id: row.user_id,\n      product_id: row.product_id,\n      product_pricing_option_id: row.product_pricing_option_id,\n      purchase_date: row.purchase_date,\n      amount_paid_gh: parseFloat(row.amount_paid_gh),\n      status: row.status,\n      product_name: row.product_name,\n      product_pricing_option_duration_days: row.product_pricing_option_duration_days,\n      product_pricing_option_mode_label: row.product_pricing_option_mode_label, \n      description: row.description, \n    }));\n\n    return NextResponse.json(purchaseHistory);\n  } catch (error: any) {\n    console.error(`API Error fetching purchase history for user ${userId}:`, error);\n    return NextResponse.json({ message: 'Internal Server Error', error: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AACA,sDAAsD;;;;AACtD;AACA;;;AAUO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAkC;IAE1C,MAAM,SAAS,OAAO,MAAM;IAE5B,IAAI,CAAC,UAAU,MAAM,SAAS,UAAU;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACxB,CAAC;;;;;;;;;;;;;;;;;oCAiB6B,CAAC,EAC/B;YAAC,SAAS;SAAQ;QAGpB,MAAM,kBAAyC,QAAQ,GAAG,CAAC,CAAC,MAAa,CAAC;gBACxE,IAAI,IAAI,EAAE;gBACV,SAAS,IAAI,OAAO;gBACpB,YAAY,IAAI,UAAU;gBAC1B,2BAA2B,IAAI,yBAAyB;gBACxD,eAAe,IAAI,aAAa;gBAChC,gBAAgB,WAAW,IAAI,cAAc;gBAC7C,QAAQ,IAAI,MAAM;gBAClB,cAAc,IAAI,YAAY;gBAC9B,sCAAsC,IAAI,oCAAoC;gBAC9E,mCAAmC,IAAI,iCAAiC;gBACxE,aAAa,IAAI,WAAW;YAC9B,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,6CAA6C,EAAE,OAAO,CAAC,CAAC,EAAE;QACzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG;AACF","debugId":null}}]
}