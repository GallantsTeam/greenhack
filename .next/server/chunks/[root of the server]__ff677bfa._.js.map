{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-settings/telegram/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-settings/telegram/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SiteTelegramSettings, AdminTelegramNotificationPrefs } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nconst TELEGRAM_SETTINGS_ROW_ID = 1;\nconst ADMIN_PREFS_ROW_ID = 1;\n\nexport async function GET(request: NextRequest) {\n  // TODO: Add admin authentication check\n  try {\n    const telegramSettingsResults = await query('SELECT * FROM site_telegram_settings WHERE id = ? LIMIT 1', [TELEGRAM_SETTINGS_ROW_ID]);\n    const adminNotificationPrefsResults = await query('SELECT * FROM admin_telegram_notification_prefs WHERE id = ? LIMIT 1', [ADMIN_PREFS_ROW_ID]);\n\n    const defaultTelegramSettings: SiteTelegramSettings = {\n        id: TELEGRAM_SETTINGS_ROW_ID,\n        client_bot_token: null,\n        client_bot_chat_id: null,\n        admin_bot_token: null,\n        admin_bot_chat_ids: null,\n        key_bot_token: null,\n        key_bot_admin_chat_ids: null,\n    };\n     const defaultAdminNotificationPrefs: AdminTelegramNotificationPrefs = {\n        id: ADMIN_PREFS_ROW_ID,\n        notify_admin_on_balance_deposit: false,\n        notify_admin_on_product_purchase: false,\n        notify_admin_on_promo_code_creation: false,\n        notify_admin_on_admin_login: false,\n        notify_admin_on_key_activation_request: true, // Default to true for new setting\n    };\n\n    const telegramSettings = (Array.isArray(telegramSettingsResults) && telegramSettingsResults.length > 0) \n        ? telegramSettingsResults[0] \n        : defaultTelegramSettings;\n        \n    const adminPrefsDb = (Array.isArray(adminNotificationPrefsResults) && adminNotificationPrefsResults.length > 0)\n        ? adminNotificationPrefsResults[0]\n        : defaultAdminNotificationPrefs;\n\n    const notificationPrefs: AdminTelegramNotificationPrefs = {\n        id: adminPrefsDb.id,\n        notify_admin_on_balance_deposit: Boolean(adminPrefsDb.notify_admin_on_balance_deposit),\n        notify_admin_on_product_purchase: Boolean(adminPrefsDb.notify_admin_on_product_purchase),\n        notify_admin_on_promo_code_creation: Boolean(adminPrefsDb.notify_admin_on_promo_code_creation),\n        notify_admin_on_admin_login: Boolean(adminPrefsDb.notify_admin_on_admin_login),\n        notify_admin_on_key_activation_request: adminPrefsDb.notify_admin_on_key_activation_request === undefined ? true : Boolean(adminPrefsDb.notify_admin_on_key_activation_request),\n        updated_at: adminPrefsDb.updated_at,\n    };\n\n\n    return NextResponse.json({ telegramSettings, notificationPrefs });\n  } catch (error: any) {\n    console.error('API Admin Telegram Settings GET Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  // TODO: Add admin authentication check\n  try {\n    const body = await request.json();\n    const { \n      client_bot_token, client_bot_chat_id, admin_bot_token, admin_bot_chat_ids,\n      key_bot_token, key_bot_admin_chat_ids, // New key bot fields\n      notify_admin_on_balance_deposit, notify_admin_on_product_purchase, \n      notify_admin_on_promo_code_creation, notify_admin_on_admin_login,\n      notify_admin_on_key_activation_request // New notification pref\n    } = body;\n\n    // Update site_telegram_settings\n    const updateTelegramSettingsQuery = `\n      INSERT INTO site_telegram_settings (id, client_bot_token, client_bot_chat_id, admin_bot_token, admin_bot_chat_ids, key_bot_token, key_bot_admin_chat_ids)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n      ON DUPLICATE KEY UPDATE\n        client_bot_token = VALUES(client_bot_token),\n        client_bot_chat_id = VALUES(client_bot_chat_id),\n        admin_bot_token = VALUES(admin_bot_token),\n        admin_bot_chat_ids = VALUES(admin_bot_chat_ids),\n        key_bot_token = VALUES(key_bot_token),\n        key_bot_admin_chat_ids = VALUES(key_bot_admin_chat_ids),\n        updated_at = NOW()\n    `;\n    await query(updateTelegramSettingsQuery, [\n      TELEGRAM_SETTINGS_ROW_ID,\n      client_bot_token || null,\n      client_bot_chat_id || null,\n      admin_bot_token || null,\n      admin_bot_chat_ids || null,\n      key_bot_token || null,\n      key_bot_admin_chat_ids || null,\n    ]);\n\n    // Update admin_telegram_notification_prefs\n    const updateAdminPrefsQuery = `\n      INSERT INTO admin_telegram_notification_prefs (id, notify_admin_on_balance_deposit, notify_admin_on_product_purchase, notify_admin_on_promo_code_creation, notify_admin_on_admin_login, notify_admin_on_key_activation_request)\n      VALUES (?, ?, ?, ?, ?, ?)\n      ON DUPLICATE KEY UPDATE\n        notify_admin_on_balance_deposit = VALUES(notify_admin_on_balance_deposit),\n        notify_admin_on_product_purchase = VALUES(notify_admin_on_product_purchase),\n        notify_admin_on_promo_code_creation = VALUES(notify_admin_on_promo_code_creation),\n        notify_admin_on_admin_login = VALUES(notify_admin_on_admin_login),\n        notify_admin_on_key_activation_request = VALUES(notify_admin_on_key_activation_request),\n        updated_at = NOW()\n    `;\n    await query(updateAdminPrefsQuery, [\n      ADMIN_PREFS_ROW_ID,\n      Boolean(notify_admin_on_balance_deposit),\n      Boolean(notify_admin_on_product_purchase),\n      Boolean(notify_admin_on_promo_code_creation),\n      Boolean(notify_admin_on_admin_login),\n      Boolean(notify_admin_on_key_activation_request),\n    ]);\n    \n    const updatedTelegramSettingsResults = await query('SELECT * FROM site_telegram_settings WHERE id = ? LIMIT 1', [TELEGRAM_SETTINGS_ROW_ID]);\n    const updatedAdminNotificationPrefsResults = await query('SELECT * FROM admin_telegram_notification_prefs WHERE id = ? LIMIT 1', [ADMIN_PREFS_ROW_ID]);\n\n\n    return NextResponse.json({ \n        message: 'Настройки Telegram успешно обновлены.',\n        settings: {\n            telegramSettings: updatedTelegramSettingsResults[0] || null,\n            notificationPrefs: updatedAdminNotificationPrefsResults[0] ? {\n                ...updatedAdminNotificationPrefsResults[0],\n                notify_admin_on_balance_deposit: Boolean(updatedAdminNotificationPrefsResults[0].notify_admin_on_balance_deposit),\n                notify_admin_on_product_purchase: Boolean(updatedAdminNotificationPrefsResults[0].notify_admin_on_product_purchase),\n                notify_admin_on_promo_code_creation: Boolean(updatedAdminNotificationPrefsResults[0].notify_admin_on_promo_code_creation),\n                notify_admin_on_admin_login: Boolean(updatedAdminNotificationPrefsResults[0].notify_admin_on_admin_login),\n                notify_admin_on_key_activation_request: updatedAdminNotificationPrefsResults[0].notify_admin_on_key_activation_request === undefined ? true : Boolean(updatedAdminNotificationPrefsResults[0].notify_admin_on_key_activation_request),\n            } : null\n        }\n    }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('API Admin Telegram Settings PUT Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}