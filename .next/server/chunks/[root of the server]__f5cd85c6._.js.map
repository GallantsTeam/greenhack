{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/how-to-run-guides/%5BproductSlug%5D/route.ts"],"sourcesContent":["\n// src/app/api/admin/how-to-run-guides/[productSlug]/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { HowToRunGuide } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nexport const dynamic = 'force-dynamic';\n\n// GET specific how-to-run guide by product_slug\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { productSlug: string } }\n) {\n  // TODO: Add admin authentication check\n  const productSlug = params.productSlug;\n  if (!productSlug) {\n    return NextResponse.json({ message: 'Product slug is required' }, { status: 400 });\n  }\n\n  try {\n    const results = await query(\n      `SELECT \n         htrg.product_slug, \n         htrg.title, \n         htrg.content,\n         htrg.created_at,\n         htrg.updated_at,\n         p.name as product_name\n       FROM how_to_run_guides htrg\n       JOIN products p ON htrg.product_slug = p.slug\n       WHERE htrg.product_slug = ?`, \n      [productSlug]\n    );\n\n    if (results.length === 0) {\n      return NextResponse.json({ message: 'Инструкция для этого товара не найдена.' }, { status: 404 });\n    }\n    \n    const guide: HowToRunGuide = {\n      product_slug: results[0].product_slug,\n      title: results[0].title,\n      content: results[0].content,\n      product_name: results[0].product_name,\n      created_at: results[0].created_at,\n      updated_at: results[0].updated_at,\n    };\n\n    return NextResponse.json(guide);\n  } catch (error: any) {\n    console.error(`API Admin HowToRunGuide GET (Slug: ${productSlug}) Error:`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n// PUT (Create or Update) how-to-run guide by product_slug\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { productSlug: string } }\n) {\n  // TODO: Add admin authentication check\n  const productSlug = params.productSlug;\n  if (!productSlug) {\n    return NextResponse.json({ message: 'Product slug is required' }, { status: 400 });\n  }\n\n  try {\n    const body = await request.json();\n    const { title, content } = body as Partial<Omit<HowToRunGuide, 'product_slug'>>;\n\n    if (!title || !content) {\n      return NextResponse.json({ message: 'Title and Content are required.' }, { status: 400 });\n    }\n\n    // Check if product exists\n    const productExists = await query('SELECT id FROM products WHERE slug = ?', [productSlug]);\n    if (productExists.length === 0) {\n        return NextResponse.json({ message: `Товар с slug '${productSlug}' не найден. Инструкция не может быть создана/обновлена.` }, { status: 404 });\n    }\n\n    const existingGuide = await query('SELECT product_slug FROM how_to_run_guides WHERE product_slug = ?', [productSlug]);\n\n    let result;\n    let messageAction: string;\n\n    if (existingGuide.length > 0) {\n      // Update existing guide\n      result = await query(\n        'UPDATE how_to_run_guides SET title = ?, content = ?, updated_at = NOW() WHERE product_slug = ?',\n        [title, content, productSlug]\n      ) as OkPacket | ResultSetHeader | any[];\n      messageAction = 'обновлена';\n    } else {\n      // Insert new guide\n      result = await query(\n        'INSERT INTO how_to_run_guides (product_slug, title, content, created_at, updated_at) VALUES (?, ?, ?, NOW(), NOW())',\n        [productSlug, title, content]\n      ) as OkPacket | ResultSetHeader | any[];\n      messageAction = 'создана';\n    }\n\n    let affectedRows = 0;\n    if (Array.isArray(result) && result.length > 0 && 'affectedRows' in result[0]) {\n        affectedRows = result[0].affectedRows;\n    } else if (result && 'affectedRows' in result) { \n        affectedRows = (result as OkPacket).affectedRows; \n    } else if (result && 'insertId' in result) { // For insert, check insertId\n        affectedRows = (result as OkPacket).insertId ? 1 : 0;\n    }\n\n    if (affectedRows > 0) {\n      const updatedGuideResult = await query('SELECT * FROM how_to_run_guides WHERE product_slug = ?', [productSlug]);\n      return NextResponse.json({ message: `Инструкция успешно ${messageAction}.`, guide: updatedGuideResult[0] }, { status: 200 });\n    } else {\n      return NextResponse.json({ message: `Не удалось ${messageAction === 'обновлена' ? 'обновить' : 'создать'} инструкцию.` }, { status: 500 });\n    }\n  } catch (error: any) {\n    console.error(`API Admin HowToRunGuide PUT (Slug: ${productSlug}) Error:`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n// DELETE how-to-run guide by product_slug\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { productSlug: string } }\n) {\n  // TODO: Add admin authentication check\n  const productSlug = params.productSlug;\n  if (!productSlug) {\n    return NextResponse.json({ message: 'Product slug is required' }, { status: 400 });\n  }\n\n  try {\n    const result = await query('DELETE FROM how_to_run_guides WHERE product_slug = ?', [productSlug]) as OkPacket | ResultSetHeader | any[];\n    \n    let affectedRows = 0;\n    if (Array.isArray(result) && result.length > 0 && 'affectedRows' in result[0]) {\n        affectedRows = result[0].affectedRows;\n    } else if (result && 'affectedRows' in result) {\n        affectedRows = (result as OkPacket).affectedRows;\n    }\n\n    if (affectedRows > 0) {\n      return NextResponse.json({ message: 'Инструкция успешно удалена.' }, { status: 200 });\n    } else {\n      return NextResponse.json({ message: 'Инструкция не найдена или уже была удалена.' }, { status: 404 });\n    }\n  } catch (error: any) {\n    console.error(`API Admin HowToRunGuide DELETE (Slug: ${productSlug}) Error:`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}