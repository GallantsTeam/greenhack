{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-settings/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-settings/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SiteSettings } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nconst SETTINGS_ROW_ID = 1; \n\n// Эта функция теперь включает ВСЕ поля из SiteSettings, включая новые для marketplace\nconst getDefaultSettings = (): SiteSettings => ({\n  id: SETTINGS_ROW_ID,\n  site_name: 'Green Hack',\n  site_description: 'Лучшие читы для ваших любимых игр!',\n  logo_url: null,\n  footer_text: `© ${new Date().getFullYear()} Green Hack. Все права защищены.`,\n  contact_vk_label: 'Наша беседа VK',\n  contact_vk_url: '#',\n  contact_telegram_bot_label: 'Наш Telegram Бот',\n  contact_telegram_bot_url: '#',\n  contact_email_label: 'Email поддержки',\n  contact_email_address: 'support@example.com',\n  footer_marketplace_text: 'Мы продаем на:',\n  footer_marketplace_logo_url: 'https://yougame.biz/images/rlm/logo/logoconcept4.png',\n  footer_marketplace_link_url: 'https://yougame.biz/members/263428/',\n  footer_marketplace_is_visible: true,\n  faq_page_main_title: 'Часто Задаваемые Вопросы',\n  faq_page_contact_prompt_text: 'Не нашли ответ на свой вопрос? Напишите в поддержку',\n  rules_page_content: '<p>Начальный текст для правил сайта...</p>',\n  offer_page_content: '<p>Начальный текст для публичной оферты...</p>',\n});\n\nexport async function GET(request: NextRequest) {\n  console.log('[API GET /admin/site-settings] Attempting to fetch settings...');\n  let settingsFromDb: Partial<SiteSettings> = {};\n  \n  try {\n    const results = await query('SELECT * FROM site_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    if (Array.isArray(results) && results.length > 0) {\n      settingsFromDb = results[0];\n      console.log('[API GET /admin/site-settings] Successfully fetched settings from DB:', settingsFromDb);\n    } else {\n      console.log(`[API GET /admin/site-settings] Settings row with id=${SETTINGS_ROW_ID} not found. Attempting to create minimal row.`);\n      try {\n        await query('INSERT IGNORE INTO site_settings (id, site_name, site_description, footer_text, faq_page_main_title, faq_page_contact_prompt_text, rules_page_content, offer_page_content) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', \n        [SETTINGS_ROW_ID, \n         getDefaultSettings().site_name, \n         getDefaultSettings().site_description,\n         getDefaultSettings().footer_text,\n         getDefaultSettings().faq_page_main_title,\n         getDefaultSettings().faq_page_contact_prompt_text,\n         getDefaultSettings().rules_page_content,\n         getDefaultSettings().offer_page_content\n        ]);\n        const newResults = await query('SELECT * FROM site_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n        if (Array.isArray(newResults) && newResults.length > 0) {\n          settingsFromDb = newResults[0];\n           console.log('[API GET /admin/site-settings] Minimal row created and fetched:', settingsFromDb);\n        } else {\n          console.log('[API GET /admin/site-settings] Minimal row still not found after insert attempt.');\n        }\n      } catch (insertError: any) {\n         console.error('[API GET /admin/site-settings] Error inserting minimal default settings row:', insertError.message);\n      }\n    }\n  } catch (fetchError: any) {\n      if (fetchError.code === 'ER_NO_SUCH_TABLE') {\n          console.warn('[API GET /admin/site-settings] site_settings table does not exist. This is expected on first run or if migrations are pending. Returning hardcoded defaults.');\n          try {\n            // Attempt to create the table with all fields\n             await query(`\n                CREATE TABLE IF NOT EXISTS site_settings (\n                    id INT NOT NULL DEFAULT 1,\n                    site_name VARCHAR(255) NULL,\n                    site_description TEXT NULL,\n                    logo_url VARCHAR(512) NULL,\n                    footer_text TEXT NULL,\n                    contact_vk_label VARCHAR(255) NULL,\n                    contact_vk_url VARCHAR(512) NULL,\n                    contact_telegram_bot_label VARCHAR(255) NULL,\n                    contact_telegram_bot_url VARCHAR(512) NULL,\n                    contact_email_label VARCHAR(255) NULL,\n                    contact_email_address VARCHAR(255) NULL,\n                    footer_marketplace_text VARCHAR(255) NULL,\n                    footer_marketplace_logo_url VARCHAR(512) NULL,\n                    footer_marketplace_link_url VARCHAR(512) NULL,\n                    footer_marketplace_is_visible BOOLEAN DEFAULT TRUE,\n                    faq_page_main_title VARCHAR(255) NULL,\n                    faq_page_contact_prompt_text VARCHAR(500) NULL,\n                    rules_page_content LONGTEXT NULL,\n                    offer_page_content LONGTEXT NULL,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n                    PRIMARY KEY (id),\n                    CONSTRAINT pk_site_settings_id_is_1 CHECK (id = 1)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n            `);\n            // Insert default row\n            await query('INSERT IGNORE INTO site_settings (id, site_name, site_description, footer_text, faq_page_main_title, faq_page_contact_prompt_text, rules_page_content, offer_page_content) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', \n            [SETTINGS_ROW_ID, \n             getDefaultSettings().site_name, \n             getDefaultSettings().site_description,\n             getDefaultSettings().footer_text,\n             getDefaultSettings().faq_page_main_title,\n             getDefaultSettings().faq_page_contact_prompt_text,\n             getDefaultSettings().rules_page_content,\n             getDefaultSettings().offer_page_content\n            ]);\n            console.log('[API GET /admin/site-settings] site_settings table created and default row inserted.');\n          } catch (createTableError: any) {\n            console.error('[API GET /admin/site-settings] CRITICAL: Failed to create site_settings table:', createTableError.message);\n          }\n      } else {\n          console.error('[API GET /admin/site-settings] Error fetching site_settings:', fetchError.message);\n      }\n  }\n  \n  const defaults = getDefaultSettings();\n  const mergedSettings: SiteSettings = {\n      ...defaults,\n      ...settingsFromDb,\n      id: SETTINGS_ROW_ID,\n      footer_marketplace_is_visible: settingsFromDb.footer_marketplace_is_visible !== undefined ? Boolean(settingsFromDb.footer_marketplace_is_visible) : defaults.footer_marketplace_is_visible,\n      faq_page_main_title: settingsFromDb.faq_page_main_title || defaults.faq_page_main_title,\n      faq_page_contact_prompt_text: settingsFromDb.faq_page_contact_prompt_text || defaults.faq_page_contact_prompt_text,\n      rules_page_content: settingsFromDb.rules_page_content || defaults.rules_page_content,\n      offer_page_content: settingsFromDb.offer_page_content || defaults.offer_page_content,\n  };\n  console.log('[API GET /admin/site-settings] Returning merged settings:', mergedSettings);\n  return NextResponse.json(mergedSettings);\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = await request.json();\n    console.log('[API PUT /admin/site-settings] Received body for update:', body);\n\n    await query('INSERT IGNORE INTO site_settings (id) VALUES (?)', [SETTINGS_ROW_ID]);\n    console.log('[API PUT /admin/site-settings] Ensured settings row with id=1 exists.');\n\n    const updateFields: string[] = [];\n    const queryParams: any[] = [];\n    \n    const editableFields: (keyof SiteSettings)[] = [\n        'site_name', 'site_description', 'logo_url', 'footer_text',\n        'contact_vk_label', 'contact_vk_url',\n        'contact_telegram_bot_label', 'contact_telegram_bot_url',\n        'contact_email_label', 'contact_email_address',\n        'footer_marketplace_text', 'footer_marketplace_logo_url', \n        'footer_marketplace_link_url', 'footer_marketplace_is_visible',\n        'faq_page_main_title', 'faq_page_contact_prompt_text',\n        'rules_page_content', 'offer_page_content'\n    ];\n\n    editableFields.forEach(key => {\n      if (body[key] !== undefined) {\n        updateFields.push(`${key} = ?`);\n        let valueToPush = body[key];\n        if (key === 'footer_marketplace_is_visible') {\n            valueToPush = Boolean(body[key]);\n        } else if (valueToPush === '' && key !== 'rules_page_content' && key !== 'offer_page_content') { // Allow empty string for content\n            valueToPush = null;\n        }\n        queryParams.push(valueToPush);\n      }\n    });\n\n    if (updateFields.length === 0) {\n      const currentSettingsResult = await query('SELECT * FROM site_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n      let currentSettings = getDefaultSettings();\n      if (Array.isArray(currentSettingsResult) && currentSettingsResult.length > 0) {\n          currentSettings = { \n            ...currentSettings, \n            ...currentSettingsResult[0], \n            footer_marketplace_is_visible: Boolean(currentSettingsResult[0].footer_marketplace_is_visible),\n            faq_page_main_title: currentSettingsResult[0].faq_page_main_title || currentSettings.faq_page_main_title,\n            faq_page_contact_prompt_text: currentSettingsResult[0].faq_page_contact_prompt_text || currentSettings.faq_page_contact_prompt_text,\n            rules_page_content: currentSettingsResult[0].rules_page_content || currentSettings.rules_page_content,\n            offer_page_content: currentSettingsResult[0].offer_page_content || currentSettings.offer_page_content,\n          };\n      }\n      console.log('[API PUT /admin/site-settings] No fields to update. Returning current settings.');\n      return NextResponse.json({ message: 'No settings provided to update.', settings: currentSettings }, { status: 200 });\n    }\n\n    updateFields.push('updated_at = NOW()');\n    queryParams.push(SETTINGS_ROW_ID);\n\n    const updateQuery = `UPDATE site_settings SET ${updateFields.join(', ')} WHERE id = ?`;\n    \n    console.log('[API PUT /admin/site-settings] Executing SQL update:', updateQuery);\n    console.log('[API PUT /admin/site-settings] Update Parameters:', queryParams);\n    \n    await query(updateQuery, queryParams);\n    \n    const updatedSettingsResult = await query('SELECT * FROM site_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]);\n    let finalSettings = getDefaultSettings();\n    if (Array.isArray(updatedSettingsResult) && updatedSettingsResult.length > 0) {\n        finalSettings = { \n            ...finalSettings, \n            ...updatedSettingsResult[0], \n            footer_marketplace_is_visible: Boolean(updatedSettingsResult[0].footer_marketplace_is_visible),\n            faq_page_main_title: updatedSettingsResult[0].faq_page_main_title || finalSettings.faq_page_main_title,\n            faq_page_contact_prompt_text: updatedSettingsResult[0].faq_page_contact_prompt_text || finalSettings.faq_page_contact_prompt_text,\n            rules_page_content: updatedSettingsResult[0].rules_page_content || finalSettings.rules_page_content,\n            offer_page_content: updatedSettingsResult[0].offer_page_content || finalSettings.offer_page_content,\n        };\n    }\n    console.log('[API PUT /admin/site-settings] Returning updated settings:', finalSettings);\n    return NextResponse.json({ message: 'Настройки сайта успешно обновлены.', settings: finalSettings }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('[API PUT /admin/site-settings] Error:', error.message);\n    if (error.code === 'ER_BAD_FIELD_ERROR' || error.message.includes('Unknown column')) {\n        return NextResponse.json({ message: `Ошибка обновления: одна из колонок не существует в таблице 'site_settings'. Проверьте структуру таблицы или выполните предоставленный SQL-запрос для ее обновления. Детали: ${error.message}` }, { status: 400 });\n    }\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}