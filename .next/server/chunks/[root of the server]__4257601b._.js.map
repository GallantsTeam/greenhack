{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/stats/route.ts"],"sourcesContent":["\n// src/app/api/admin/stats/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { AdminStats } from '@/types';\n\nexport async function GET(request: NextRequest) {\n  // TODO: Add proper admin authentication and authorization\n  console.log(\"[API /admin/stats] Received GET request\");\n  try {\n    const usersResultPromise = query('SELECT COUNT(*) as totalUsers FROM users');\n    const productsResultPromise = query('SELECT COUNT(*) as totalProducts FROM products');\n    \n    const now = new Date();\n    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().slice(0, 19).replace('T', ' ');\n    const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59).toISOString().slice(0, 19).replace('T', ' '); // End of current month\n\n    console.log(`[API /admin/stats] Fetching sales from ${firstDayOfMonth} to ${lastDayOfMonth}`);\n    const monthlySalesResultPromise = query(\n      `SELECT SUM(amount_paid_gh) as monthlySalesGh \n       FROM purchases \n       WHERE status = 'completed' \n       AND purchase_date >= ? \n       AND purchase_date <= ?`, // Changed to <= for end of month\n      [firstDayOfMonth, lastDayOfMonth]\n    );\n\n    // For open tickets, we'll return 0 as it's not implemented\n    // const openTicketsResultPromise = query('SELECT COUNT(*) as openTickets FROM support_tickets WHERE status = \"open\"');\n\n    const [usersResult, productsResult, monthlySalesResult] = await Promise.all([\n      usersResultPromise,\n      productsResultPromise,\n      monthlySalesResultPromise,\n      // openTicketsResultPromise\n    ]);\n\n    const totalUsers = usersResult[0]?.totalUsers || 0;\n    const totalProducts = productsResult[0]?.totalProducts || 0;\n    const monthlySalesGh = parseFloat(monthlySalesResult[0]?.monthlySalesGh) || 0;\n    const openTickets = 0; // Placeholder\n\n    const stats: AdminStats = {\n      totalUsers,\n      totalProducts,\n      monthlySalesGh,\n      openTickets,\n    };\n    console.log(\"[API /admin/stats] Successfully fetched stats:\", stats);\n    return NextResponse.json(stats);\n  } catch (error: any) {\n    console.error('API Admin Stats GET Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AACA,mCAAmC;;;;AACnC;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,0DAA0D;IAC1D,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,qBAAqB,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE;QACjC,MAAM,wBAAwB,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE;QAEpC,MAAM,MAAM,IAAI;QAChB,MAAM,kBAAkB,IAAI,KAAK,IAAI,WAAW,IAAI,IAAI,QAAQ,IAAI,GAAG,WAAW,GAAG,KAAK,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK;QAC/G,MAAM,iBAAiB,IAAI,KAAK,IAAI,WAAW,IAAI,IAAI,QAAQ,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK,MAAM,uBAAuB;QAE3J,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAE,gBAAgB,IAAI,EAAE,gBAAgB;QAC5F,MAAM,4BAA4B,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACpC,CAAC;;;;6BAIsB,CAAC,EACxB;YAAC;YAAiB;SAAe;QAGnC,2DAA2D;QAC3D,uHAAuH;QAEvH,MAAM,CAAC,aAAa,gBAAgB,mBAAmB,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC1E;YACA;YACA;SAED;QAED,MAAM,aAAa,WAAW,CAAC,EAAE,EAAE,cAAc;QACjD,MAAM,gBAAgB,cAAc,CAAC,EAAE,EAAE,iBAAiB;QAC1D,MAAM,iBAAiB,WAAW,kBAAkB,CAAC,EAAE,EAAE,mBAAmB;QAC5E,MAAM,cAAc,GAAG,cAAc;QAErC,MAAM,QAAoB;YACxB;YACA;YACA;YACA;QACF;QACA,QAAQ,GAAG,CAAC,kDAAkD;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF","debugId":null}}]
}