{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/faq-items/route.ts"],"sourcesContent":["\n// src/app/api/admin/faq-items/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { FaqItem } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nexport async function GET(request: NextRequest) {\n  // TODO: Admin auth check\n  try {\n    const results = await query('SELECT * FROM faq_items ORDER BY item_order ASC, id ASC');\n    const faqItems: FaqItem[] = results.map((item: any) => ({\n      ...item,\n      is_active: Boolean(item.is_active),\n    }));\n    return NextResponse.json(faqItems);\n  } catch (error: any) {\n    console.error('API Admin FAQ GET Error:', error);\n    return NextResponse.json({ message: `Failed to fetch FAQ items: ${error.message}` }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  // TODO: Admin auth check\n  try {\n    const body = await request.json();\n    const { question, answer, item_order = 0, is_active = true } = body as Omit<FaqItem, 'id' | 'created_at' | 'updated_at'>;\n\n    if (!question || !answer) {\n      return NextResponse.json({ message: 'Question and Answer are required' }, { status: 400 });\n    }\n\n    const result = await query(\n      'INSERT INTO faq_items (question, answer, item_order, is_active) VALUES (?, ?, ?, ?)',\n      [question, answer, item_order, is_active]\n    ) as OkPacket;\n\n    if (result.insertId) {\n      const newFaqItem: FaqItem = {\n        id: result.insertId,\n        question,\n        answer,\n        item_order,\n        is_active,\n        created_at: new Date().toISOString(), // Approximate\n      };\n      return NextResponse.json({ message: 'FAQ item created successfully', faqItem: newFaqItem }, { status: 201 });\n    } else {\n      return NextResponse.json({ message: 'Failed to create FAQ item' }, { status: 500 });\n    }\n  } catch (error: any) {\n    console.error('API Admin FAQ POST Error:', error);\n    return NextResponse.json({ message: `Failed to create FAQ item: ${error.message}` }, { status: 500 });\n  }\n}\n\n    "],"names":[],"mappings":"AACA,uCAAuC;;;;;AACvC;AACA;;;AAIO,eAAe,IAAI,OAAoB;IAC5C,yBAAyB;IACzB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE;QAC5B,MAAM,WAAsB,QAAQ,GAAG,CAAC,CAAC,OAAc,CAAC;gBACtD,GAAG,IAAI;gBACP,WAAW,QAAQ,KAAK,SAAS;YACnC,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,2BAA2B,EAAE,MAAM,OAAO,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,yBAAyB;IACzB,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,EAAE,YAAY,IAAI,EAAE,GAAG;QAE/D,IAAI,CAAC,YAAY,CAAC,QAAQ;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACvB,uFACA;YAAC;YAAU;YAAQ;YAAY;SAAU;QAG3C,IAAI,OAAO,QAAQ,EAAE;YACnB,MAAM,aAAsB;gBAC1B,IAAI,OAAO,QAAQ;gBACnB;gBACA;gBACA;gBACA;gBACA,YAAY,IAAI,OAAO,WAAW;YACpC;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAiC,SAAS;YAAW,GAAG;gBAAE,QAAQ;YAAI;QAC5G,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACnF;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,2BAA2B,EAAE,MAAM,OAAO,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG;AACF","debugId":null}}]
}