{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/faq-sidebar-items/%5BitemId%5D/route.ts"],"sourcesContent":["\n// src/app/api/admin/faq-sidebar-items/[itemId]/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { FaqSidebarNavItem } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\n// GET single FAQ sidebar item (admin only)\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { itemId: string } }\n) {\n  // TODO: Admin auth check\n  const id = parseInt(params.itemId, 10);\n  if (isNaN(id)) {\n    return NextResponse.json({ message: 'Invalid item ID' }, { status: 400 });\n  }\n\n  try {\n    const results = await query('SELECT * FROM faq_sidebar_nav_items WHERE id = ?', [id]);\n    if (!Array.isArray(results) || results.length === 0) {\n        return NextResponse.json({ message: 'FAQ Sidebar Item not found' }, { status: 404 });\n    }\n    const item: FaqSidebarNavItem = {\n        ...results[0],\n        is_active: Boolean(results[0].is_active),\n        content: results[0].content || null, // Ensure content is included\n    };\n    return NextResponse.json(item);\n  } catch (error: any) {\n    console.error('API Admin FAQ Sidebar GET (single) Error:', error);\n    return NextResponse.json({ message: `Failed to fetch FAQ sidebar item: ${error.message}` }, { status: 500 });\n  }\n}\n\n// PUT update FAQ sidebar item (admin only)\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { itemId: string } }\n) {\n  // TODO: Admin auth check\n  const id = parseInt(params.itemId, 10);\n  if (isNaN(id)) {\n    return NextResponse.json({ message: 'Invalid item ID' }, { status: 400 });\n  }\n\n  try {\n    const body = await request.json();\n    const {\n      title, href, image_url, image_alt_text, data_ai_hint,\n      content, // Added content\n      item_order, is_active\n    } = body as Partial<Omit<FaqSidebarNavItem, 'id' | 'created_at' | 'updated_at'>>;\n\n    if (!title || !href || !image_url) {\n      return NextResponse.json({ message: 'Title, Href, and Image URL are required' }, { status: 400 });\n    }\n\n    const updateQuery = `\n      UPDATE faq_sidebar_nav_items SET\n        title = ?, href = ?, image_url = ?, image_alt_text = ?, data_ai_hint = ?,\n        content = ?, item_order = ?, is_active = ?, updated_at = NOW()\n      WHERE id = ?\n    `;\n    const queryParams = [\n        title, href, image_url, image_alt_text || null, data_ai_hint || null,\n        content || null, // Save content\n        Number(item_order), Boolean(is_active), id\n    ];\n\n    const result = await query(updateQuery, queryParams) as OkPacket;\n\n    if (result.affectedRows > 0) {\n      const updatedItem = await query('SELECT * FROM faq_sidebar_nav_items WHERE id = ?', [id]);\n      const itemToReturn: FaqSidebarNavItem = {\n        ...updatedItem[0],\n        is_active: Boolean(updatedItem[0].is_active),\n        content: updatedItem[0].content || null,\n      };\n      return NextResponse.json({ message: 'FAQ sidebar item updated successfully', item: itemToReturn });\n    } else {\n      const currentItem = await query('SELECT * FROM faq_sidebar_nav_items WHERE id = ?', [id]);\n      if (currentItem.length === 0) {\n        return NextResponse.json({ message: 'FAQ sidebar item not found' }, { status: 404 });\n      }\n      return NextResponse.json({ message: 'No changes made to the FAQ sidebar item.', item: currentItem[0] });\n    }\n  } catch (error: any) {\n    console.error('API Admin FAQ Sidebar PUT Error:', error);\n    return NextResponse.json({ message: `Failed to update FAQ sidebar item: ${error.message}` }, { status: 500 });\n  }\n}\n\n// DELETE FAQ sidebar item (admin only)\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { itemId: string } }\n) {\n  // TODO: Admin auth check\n  const id = parseInt(params.itemId, 10);\n  if (isNaN(id)) {\n    return NextResponse.json({ message: 'Invalid item ID' }, { status: 400 });\n  }\n\n  try {\n    const result = await query('DELETE FROM faq_sidebar_nav_items WHERE id = ?', [id]) as OkPacket;\n    if (result.affectedRows > 0) {\n      return NextResponse.json({ message: 'FAQ sidebar item deleted successfully' });\n    } else {\n      return NextResponse.json({ message: 'FAQ sidebar item not found' }, { status: 404 });\n    }\n  } catch (error: any) {\n    console.error('API Admin FAQ Sidebar DELETE Error:', error);\n    return NextResponse.json({ message: `Failed to delete FAQ sidebar item: ${error.message}` }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}