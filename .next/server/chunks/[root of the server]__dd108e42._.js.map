{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/telegram.ts"],"sourcesContent":["\n// src/lib/telegram.ts\nimport { query } from '@/lib/mysql';\nimport type { SiteTelegramSettings, AdminTelegramNotificationPrefs, Product, ProductPricingOption, InventoryItemWithDetails, User } from '@/types';\n\nconst SETTINGS_ROW_ID = 1; // Assuming settings are in a single row with id=1\n\nasync function getTelegramSettings(): Promise<{\n  telegramSettings: SiteTelegramSettings | null;\n  notificationPrefs: AdminTelegramNotificationPrefs | null;\n}> {\n  console.log(\"[TelegramLib] Fetching Telegram configuration from DB...\");\n  try {\n    const [tgSettingsResults, adminPrefsResults] = await Promise.all([\n      query('SELECT * FROM site_telegram_settings WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]),\n      query('SELECT * FROM admin_telegram_notification_prefs WHERE id = ? LIMIT 1', [SETTINGS_ROW_ID]) // Changed table name\n    ]);\n\n    const telegramSettings: SiteTelegramSettings | null =\n      (Array.isArray(tgSettingsResults) && tgSettingsResults.length > 0) ? tgSettingsResults[0] : null;\n\n    const adminPrefsDb = (Array.isArray(adminPrefsResults) && adminPrefsResults.length > 0) ? adminPrefsResults[0] : null;\n\n    const notificationPrefs: AdminTelegramNotificationPrefs | null = adminPrefsDb ? {\n        id: adminPrefsDb.id,\n        notify_admin_on_balance_deposit: Boolean(adminPrefsDb.notify_admin_on_balance_deposit),\n        notify_admin_on_product_purchase: Boolean(adminPrefsDb.notify_admin_on_product_purchase),\n        notify_admin_on_promo_code_creation: Boolean(adminPrefsDb.notify_admin_on_promo_code_creation),\n        notify_admin_on_admin_login: Boolean(adminPrefsDb.notify_admin_on_admin_login),\n        notify_admin_on_key_activation_request: adminPrefsDb.notify_admin_on_key_activation_request === undefined ? true : Boolean(adminPrefsDb.notify_admin_on_key_activation_request),\n        updated_at: adminPrefsDb.updated_at,\n    } : null;\n    \n    console.log(\"[TelegramLib] Fetched Telegram Settings:\", telegramSettings ? { ...telegramSettings, client_bot_token: '***', admin_bot_token: '***', key_bot_token: '***'} : null);\n    console.log(\"[TelegramLib] Fetched Admin Notification Prefs:\", notificationPrefs);\n    return { telegramSettings, notificationPrefs };\n  } catch (error) {\n    console.error(\"[TelegramLib] Error fetching Telegram configuration:\", error);\n    return { telegramSettings: null, notificationPrefs: null };\n  }\n}\n\n\nexport async function sendTelegramMessage(\n  botToken: string,\n  chatId: string,\n  message: string,\n  parseMode: 'MarkdownV2' | 'HTML' = 'MarkdownV2',\n  replyMarkup?: object // For inline keyboards\n): Promise<{ success: boolean; message?: string; error?: any }> {\n  if (!botToken || !chatId || !message) {\n    const errorMsg = \"[TelegramLib] Send Error: Missing botToken, chatId, or message for Telegram.\";\n    console.error(errorMsg);\n    return { success: false, message: errorMsg };\n  }\n\n  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;\n  console.log(`[TelegramLib] Attempting to send message to ${chatId} via URL: ${telegramApiUrl.replace(botToken, '***TOKEN***')}`);\n  \n  const bodyPayload: any = {\n    chat_id: chatId,\n    text: message,\n    parse_mode: parseMode,\n  };\n  if (replyMarkup) {\n    bodyPayload.reply_markup = replyMarkup;\n  }\n\n  try {\n    const response = await fetch(telegramApiUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(bodyPayload),\n    });\n    const data = await response.json();\n    console.log(`[TelegramLib] Response from Telegram API for chat_id ${chatId}:`, data);\n\n    if (data.ok) {\n      console.log(`[TelegramLib] Message sent successfully to chat_id ${chatId}.`);\n      return { success: true, message: `Message sent to ${chatId}` };\n    } else {\n      console.error('[TelegramLib] Telegram API Error:', data);\n      return { success: false, message: `Telegram API Error: ${data.description}`, error: data };\n    }\n  } catch (error: any) {\n    console.error('[TelegramLib] Error sending Telegram message via fetch:', error);\n    return { success: false, message: `Network or parsing error: ${error.message}`, error };\n  }\n}\n\nfunction escapeTelegramMarkdownV2(text: string | number | null | undefined): string {\n  if (text === null || text === undefined) return '';\n  const textStr = String(text);\n  const escapeChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];\n  return textStr.split('').map(char => escapeChars.includes(char) ? `\\\\${char}` : char).join('');\n}\n\nexport async function notifyAdminOnBalanceDeposit(userId: number, username: string, amountGh: number, reason?: string) {\n  console.log(`[TelegramLib] notifyAdminOnBalanceDeposit called for user: ${username} (ID: ${userId}), amount: ${amountGh}, reason: ${reason}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettings();\n\n  if (!telegramSettings?.admin_bot_token) {\n    console.log(\"[TelegramLib] notifyAdminOnBalanceDeposit check failed: Admin bot token not configured.\");\n    return;\n  }\n  if (!telegramSettings.admin_bot_chat_ids) {\n    console.log(\"[TelegramLib] notifyAdminOnBalanceDeposit check failed: Admin bot chat IDs not configured.\");\n    return;\n  }\n  if (!notificationPrefs?.notify_admin_on_balance_deposit) {\n    console.log(\"[TelegramLib] notifyAdminOnBalanceDeposit check failed: Notification type is disabled in settings.\");\n    return;\n  }\n\n  const reasonText = reason ? `\\nПричина: \\`${escapeTelegramMarkdownV2(reason)}\\`` : '';\n  const message = `💰 *Пополнение баланса*\nПользователь: \\`${escapeTelegramMarkdownV2(username)}\\` (ID: \\`${userId}\\`)\nСумма: \\`+${escapeTelegramMarkdownV2(amountGh.toFixed(2))}\\` GH${reasonText}`;\n  \n  const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n  console.log(`[TelegramLib] Prepared balance deposit notification. Admin chat IDs: ${chatIds.join(', ')}`);\n  for (const chatId of chatIds) {\n    try {\n      console.log(`[TelegramLib] Attempting to send balance deposit notification to admin chat ID: ${chatId}`);\n      const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n      if (!result.success) {\n          console.error(`[TelegramLib] Failed to send balance deposit notification to ${chatId}:`, result.message, result.error);\n      }\n    } catch (e) {\n        console.error(`[TelegramLib] CRITICAL ERROR sending balance deposit notification to ${chatId}:`, e);\n    }\n  }\n}\n\nexport async function notifyAdminOnProductPurchase(userId: number, username: string, productName: string, durationDays: number | null, amountGh: number) {\n  console.log(`[TelegramLib] notifyAdminOnProductPurchase called for user: ${username}, product: ${productName}, amount: ${amountGh}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettings();\n  if (!telegramSettings?.admin_bot_token || !telegramSettings.admin_bot_chat_ids || !notificationPrefs?.notify_admin_on_product_purchase) {\n    console.log(\"[TelegramLib] notifyAdminOnProductPurchase check failed: Bot token, chat IDs, or setting disabled.\");\n    return;\n  }\n  const durationText = durationDays ? ` (${escapeTelegramMarkdownV2(durationDays)} дн\\\\.)` : '';\n  const message = `🛍️ *Новая покупка товара*\nПользователь: \\`${escapeTelegramMarkdownV2(username)}\\` (ID: \\`${userId}\\`)\nТовар: \\`${escapeTelegramMarkdownV2(productName)}\\`${durationText}\nСумма: \\`${escapeTelegramMarkdownV2(amountGh.toFixed(2))}\\` GH`;\n\n  const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n  console.log(`[TelegramLib] Prepared product purchase notification. Admin chat IDs: ${chatIds.join(', ')}`);\n  for (const chatId of chatIds) {\n     try {\n        console.log(`[TelegramLib] Attempting to send product purchase notification to admin chat ID: ${chatId}`);\n        const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n        if (!result.success) {\n            console.error(`[TelegramLib] Failed to send product purchase notification to ${chatId}:`, result.message, result.error);\n        }\n    } catch (e) {\n        console.error(`[TelegramLib] CRITICAL ERROR sending product purchase notification to ${chatId}:`, e);\n    }\n  }\n}\n\nexport async function notifyAdminOnPromoCodeCreation(\n  adminUsername: string | null, \n  promoCode: { code: string; type: string; value_gh?: number | null; product_name?: string; duration_days?: number | null; mode_label?: string | null; max_uses: number; expires_at?: string | null }\n) {\n  console.log(`[TelegramLib] notifyAdminOnPromoCodeCreation called for code: ${promoCode.code}, created by: ${adminUsername || 'System'}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettings();\n  if (!telegramSettings?.admin_bot_token || !telegramSettings.admin_bot_chat_ids || !notificationPrefs?.notify_admin_on_promo_code_creation) {\n    console.log(\"[TelegramLib] notifyAdminOnPromoCodeCreation check failed: Bot token, chat IDs, or setting disabled.\");\n    return;\n  }\n  \n  let rewardText = '';\n  if (promoCode.type === 'balance_gh' && promoCode.value_gh) {\n    rewardText = `Баланс: \\`${escapeTelegramMarkdownV2(promoCode.value_gh.toFixed(2))}\\` GH`;\n  } else if (promoCode.type === 'product' && promoCode.product_name) {\n    const duration = promoCode.duration_days ? ` (${escapeTelegramMarkdownV2(promoCode.duration_days)} дн\\\\.)` : '';\n    const mode = promoCode.mode_label ? ` [${escapeTelegramMarkdownV2(promoCode.mode_label)}]` : '';\n    rewardText = `Товар: \\`${escapeTelegramMarkdownV2(promoCode.product_name)}\\`${duration}${mode}`;\n  }\n\n  const message = `🎁 *Создан новый промокод*\nКод: \\`${escapeTelegramMarkdownV2(promoCode.code)}\\`\nТип: \\`${escapeTelegramMarkdownV2(promoCode.type)}\\`\nНаграда: ${rewardText}\nМакс\\\\. использований: \\`${promoCode.max_uses}\\`\nИстекает: \\`${promoCode.expires_at ? escapeTelegramMarkdownV2(new Date(promoCode.expires_at).toLocaleString('ru-RU')) : 'Бессрочно'}\\`\n${adminUsername ? `Создал: \\`${escapeTelegramMarkdownV2(adminUsername)}\\`` : 'Создан системой'}`;\n\n  const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n  console.log(`[TelegramLib] Prepared promo code creation notification. Admin chat IDs: ${chatIds.join(', ')}`);\n  for (const chatId of chatIds) {\n    try {\n        console.log(`[TelegramLib] Attempting to send promo code creation notification to admin chat ID: ${chatId}`);\n        const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n        if (!result.success) {\n            console.error(`[TelegramLib] Failed to send promo code creation notification to ${chatId}:`, result.message, result.error);\n        }\n    } catch (e) {\n        console.error(`[TelegramLib] CRITICAL ERROR sending promo code creation notification to ${chatId}:`, e);\n    }\n  }\n}\n\nexport async function notifyAdminOnAdminLogin(adminUsername: string, ipAddress?: string) {\n    console.log(`[TelegramLib] notifyAdminOnAdminLogin called for admin: ${adminUsername}, IP: ${ipAddress}`);\n    const { telegramSettings, notificationPrefs } = await getTelegramSettings();\n    if (!telegramSettings?.admin_bot_token || !telegramSettings.admin_bot_chat_ids || !notificationPrefs?.notify_admin_on_admin_login) {\n        console.log(\"[TelegramLib] notifyAdminOnAdminLogin check failed: Bot token, chat IDs, or setting disabled.\");\n        return;\n    }\n    const ipText = ipAddress ? `IP: \\`${escapeTelegramMarkdownV2(ipAddress)}\\`` : 'IP не определен';\n    const message = `🛡️ *Вход в Админ-панель*\nПользователь: \\`${escapeTelegramMarkdownV2(adminUsername)}\\`\n${ipText}\nВремя: \\`${escapeTelegramMarkdownV2(new Date().toLocaleString('ru-RU'))}\\``;\n\n    const chatIds = telegramSettings.admin_bot_chat_ids.split(',').map(id => id.trim()).filter(id => id);\n    console.log(`[TelegramLib] Prepared admin login notification. Admin chat IDs: ${chatIds.join(', ')}`);\n    for (const chatId of chatIds) {\n        try {\n            console.log(`[TelegramLib] Attempting to send admin login notification to admin chat ID: ${chatId}`);\n            const result = await sendTelegramMessage(telegramSettings.admin_bot_token, chatId, message);\n            if (!result.success) {\n                console.error(`[TelegramLib] Failed to send admin login notification to ${chatId}:`, result.message, result.error);\n            }\n        } catch (e) {\n            console.error(`[TelegramLib] CRITICAL ERROR sending admin login notification to ${chatId}:`, e);\n        }\n    }\n}\n\nexport async function sendKeyActivationRequestToAdmin(\n  item: InventoryItemWithDetails,\n  user: Pick<User, 'id' | 'username'>\n): Promise<{ success: boolean; message?: string; error?: any }> {\n  console.log(`[TelegramLib] sendKeyActivationRequestToAdmin called for item ID: ${item.id}, user: ${user.username}`);\n  const { telegramSettings, notificationPrefs } = await getTelegramSettings();\n  \n  const keyBotToken = telegramSettings?.key_bot_token; // Removed fallback to process.env\n  const adminChatIdsString = telegramSettings?.key_bot_admin_chat_ids; // Removed fallback to process.env\n\n  if (!keyBotToken) {\n    const errorMsg = \"[TelegramLib] Key Bot token not configured in site_telegram_settings.\";\n    console.error(errorMsg);\n    return { success: false, message: errorMsg };\n  }\n  if (!adminChatIdsString) {\n    const errorMsg = \"[TelegramLib] Key Bot admin chat IDs not configured in site_telegram_settings.\";\n    console.error(errorMsg);\n    return { success: false, message: errorMsg };\n  }\n  \n  // Check if this specific notification type is enabled\n  if (!notificationPrefs?.notify_admin_on_key_activation_request) {\n    const logMsg = \"[TelegramLib] sendKeyActivationRequestToAdmin check failed: Notification type 'notify_admin_on_key_activation_request' is disabled in admin_telegram_notification_prefs.\";\n    console.log(logMsg);\n    // Return success because the system is configured not to send, not an error.\n    return { success: true, message: \"Key activation request notification type disabled in settings.\"}; \n  }\n\n  const productName = item.product_name || 'Неизвестный товар';\n  const duration = item.duration_days ? ` (${item.duration_days} дн.)` : '';\n  const mode = item.mode_label ? ` [${item.mode_label}]` : '';\n  const userKey = item.activation_code || 'Ключ не указан';\n\n  const message = `🔑 *Запрос на активацию ключа*\nПользователь: \\`${escapeTelegramMarkdownV2(user.username)}\\` (ID: \\`${user.id}\\`)\nТовар: \\`${escapeTelegramMarkdownV2(productName)}${escapeTelegramMarkdownV2(duration)}${escapeTelegramMarkdownV2(mode)}\\`\nИнвентарь ID: \\`${item.id}\\`\nПредоставленный ключ: \\`${escapeTelegramMarkdownV2(userKey)}\\``;\n\n  const inline_keyboard = [[\n    { text: '✅ Активировать', callback_data: `activate_key:${item.id}` },\n    { text: '❌ Отклонить', callback_data: `reject_key:${item.id}` },\n  ]];\n\n  const chatIds = adminChatIdsString.split(',').map(id => id.trim()).filter(id => id);\n  let allSentSuccessfully = true;\n  let firstErrorResult: { success: boolean; message?: string; error?: any } | null = null;\n\n  console.log(`[TelegramLib] Prepared key activation request notification. Key Bot Admin chat IDs: ${chatIds.join(', ')}`);\n\n  for (const chatId of chatIds) {\n    try {\n      console.log(`[TelegramLib] Attempting to send key activation request to admin chat ID: ${chatId} using Key Bot`);\n      const result = await sendTelegramMessage(keyBotToken, chatId, message, 'MarkdownV2', { inline_keyboard });\n      \n      if (!result.success) {\n        allSentSuccessfully = false;\n        if (!firstErrorResult) {\n          firstErrorResult = result;\n        }\n        console.error(`[TelegramLib] Failed to send key activation request to ${chatId}:`, result.message, result.error);\n      } else {\n         console.log(`[TelegramLib] Key activation request sent successfully to ${chatId}.`);\n      }\n    } catch (e: any) {\n        allSentSuccessfully = false;\n        if (!firstErrorResult) {\n            firstErrorResult = { success: false, message: `Network or parsing error for key activation: ${e.message}`, error: e };\n        }\n        console.error(`[TelegramLib] CRITICAL ERROR sending key activation request to ${chatId}:`, e);\n    }\n  }\n  return allSentSuccessfully ? { success: true, message: \"Уведомление администратору отправлено.\"} : (firstErrorResult || { success: false, message: \"Неизвестная ошибка при отправке уведомлений администратору.\"});\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/license/request-activation/route.ts"],"sourcesContent":["\n// src/app/api/license/request-activation/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { InventoryItemWithDetails, User } from '@/types';\nimport { sendKeyActivationRequestToAdmin } from '@/lib/telegram';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { inventoryItemId, userId, enteredKey } = await request.json();\n    console.log('[API RequestActivation] Received:', { inventoryItemId, userId, enteredKey });\n\n    if (!inventoryItemId || !userId || !enteredKey) {\n      return NextResponse.json({ message: 'Не все поля заполнены (ID предмета, ID пользователя, ключ).' }, { status: 400 });\n    }\n\n    const inventoryItemResults = await query(\n      `SELECT \n         ui.*,\n         p.name as product_name_from_product_table,\n         COALESCE(ppo.duration_days, cp.duration_days) as resolved_duration_days,\n         ppo.mode_label as pricing_option_mode_label\n       FROM user_inventory ui\n       LEFT JOIN products p ON ui.related_product_id = p.id\n       LEFT JOIN product_pricing_options ppo ON ui.product_pricing_option_id = ppo.id\n       LEFT JOIN case_prizes cp ON ui.case_prize_id = cp.id\n       WHERE ui.id = ? AND ui.user_id = ?`,\n      [inventoryItemId, userId]\n    );\n\n    if (inventoryItemResults.length === 0) {\n      return NextResponse.json({ message: 'Предмет не найден в вашем инвентаре.' }, { status: 404 });\n    }\n    const dbItem = inventoryItemResults[0];\n     const inventoryItem: InventoryItemWithDetails = {\n      ...dbItem,\n      product_name: dbItem.product_name || dbItem.product_name_from_product_table || 'Неизвестный продукт',\n      is_used: Boolean(dbItem.is_used),\n      duration_days: dbItem.resolved_duration_days ? parseInt(dbItem.resolved_duration_days, 10) : null,\n      mode_label: dbItem.pricing_option_mode_label || null,\n      activation_status: dbItem.activation_status || 'available',\n    };\n\n    if (inventoryItem.activation_status !== 'available' && inventoryItem.activation_status !== 'rejected') {\n      return NextResponse.json({ message: `Этот предмет уже ${inventoryItem.activation_status === 'pending_admin_approval' ? 'ожидает одобрения' : 'активирован или истек'}.` }, { status: 400 });\n    }\n    \n    const userResults = await query('SELECT id, username FROM users WHERE id = ?', [userId]);\n     if (userResults.length === 0) {\n      return NextResponse.json({ message: 'Пользователь не найден.' }, { status: 404 });\n    }\n    const user: Pick<User, 'id' | 'username'> = userResults[0];\n\n    await query(\n      'UPDATE user_inventory SET activation_code = ?, activation_status = ?, updated_at = NOW() WHERE id = ?',\n      [enteredKey, 'pending_admin_approval', inventoryItemId]\n    );\n    console.log(`[API RequestActivation] Inventory item ${inventoryItemId} status updated to pending_admin_approval with key ${enteredKey}`);\n\n    const notificationItemDetails: InventoryItemWithDetails = {\n        ...inventoryItem,\n        activation_code: enteredKey,\n    };\n    \n    const telegramResult = await sendKeyActivationRequestToAdmin(notificationItemDetails, user);\n\n    if (!telegramResult.success) {\n        console.error(\"[API RequestActivation] Failed to send Telegram notification to admin for key activation:\", telegramResult.error);\n        // Revert status? For now, proceed.\n        return NextResponse.json({ \n            message: 'Запрос на активацию отправлен, но произошла ошибка при уведомлении администратора. Пожалуйста, свяжитесь с поддержкой, если активация не произойдет в ближайшее время.',\n            warning: telegramResult.message \n        }, { status: 207 }); \n    }\n\n    console.log('[API RequestActivation] Key activation request sent to admin.');\n    return NextResponse.json({ message: 'Запрос на активацию ключа отправлен администратору. Ожидайте подтверждения.' });\n\n  } catch (error: any) {\n    console.error('[API RequestActivation] Error:', error);\n    return NextResponse.json({ message: `Внутренняя ошибка сервера: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AACA,kDAAkD;;;;AAClD;AACA;AAEA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,QAAQ,IAAI;QAClE,QAAQ,GAAG,CAAC,qCAAqC;YAAE;YAAiB;YAAQ;QAAW;QAEvF,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,YAAY;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA8D,GAAG;gBAAE,QAAQ;YAAI;QACrH;QAEA,MAAM,uBAAuB,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACrC,CAAC;;;;;;;;;yCASkC,CAAC,EACpC;YAAC;YAAiB;SAAO;QAG3B,IAAI,qBAAqB,MAAM,KAAK,GAAG;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAuC,GAAG;gBAAE,QAAQ;YAAI;QAC9F;QACA,MAAM,SAAS,oBAAoB,CAAC,EAAE;QACrC,MAAM,gBAA0C;YAC/C,GAAG,MAAM;YACT,cAAc,OAAO,YAAY,IAAI,OAAO,+BAA+B,IAAI;YAC/E,SAAS,QAAQ,OAAO,OAAO;YAC/B,eAAe,OAAO,sBAAsB,GAAG,SAAS,OAAO,sBAAsB,EAAE,MAAM;YAC7F,YAAY,OAAO,yBAAyB,IAAI;YAChD,mBAAmB,OAAO,iBAAiB,IAAI;QACjD;QAEA,IAAI,cAAc,iBAAiB,KAAK,eAAe,cAAc,iBAAiB,KAAK,YAAY;YACrG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,CAAC,iBAAiB,EAAE,cAAc,iBAAiB,KAAK,2BAA2B,sBAAsB,wBAAwB,CAAC,CAAC;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC3L;QAEA,MAAM,cAAc,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,+CAA+C;YAAC;SAAO;QACtF,IAAI,YAAY,MAAM,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QACA,MAAM,OAAsC,WAAW,CAAC,EAAE;QAE1D,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EACR,yGACA;YAAC;YAAY;YAA0B;SAAgB;QAEzD,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAE,gBAAgB,mDAAmD,EAAE,YAAY;QAEvI,MAAM,0BAAoD;YACtD,GAAG,aAAa;YAChB,iBAAiB;QACrB;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,wHAAA,CAAA,kCAA+B,AAAD,EAAE,yBAAyB;QAEtF,IAAI,CAAC,eAAe,OAAO,EAAE;YACzB,QAAQ,KAAK,CAAC,6FAA6F,eAAe,KAAK;YAC/H,mCAAmC;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,SAAS;gBACT,SAAS,eAAe,OAAO;YACnC,GAAG;gBAAE,QAAQ;YAAI;QACrB;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8E;IAEpH,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,2BAA2B,EAAE,MAAM,OAAO,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG;AACF","debugId":null}}]
}