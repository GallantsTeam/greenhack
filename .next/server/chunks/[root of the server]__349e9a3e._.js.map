{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/users/route.ts"],"sourcesContent":["\n// src/app/api/admin/users/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { User } from '@/types';\nimport bcrypt from 'bcryptjs';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const usersData = await query(\n      'SELECT id, username, email, role, balance, created_at, referral_code, referred_by_user_id, referral_percentage FROM users ORDER BY created_at DESC'\n    );\n\n    const users: User[] = usersData.map((user: any) => ({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      role: user.role,\n      balance: parseFloat(user.balance) || 0,\n      created_at: user.created_at,\n      referral_code: user.referral_code,\n      referred_by_user_id: user.referred_by_user_id,\n      referral_percentage: user.referral_percentage ? parseFloat(user.referral_percentage) : 5.00, // Default if null\n    }));\n\n    return NextResponse.json(users, { status: 200 });\n  } catch (error: any) {\n    console.error('API Admin Users GET Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { username, email, password, role, balance, referral_percentage } = await request.json();\n\n    if (!username || !email || !password || !role) {\n      return NextResponse.json({ message: 'Missing required fields' }, { status: 400 });\n    }\n\n    const existingUserByEmail = await query('SELECT id FROM users WHERE email = ?', [email]);\n    if (Array.isArray(existingUserByEmail) && existingUserByEmail.length > 0) {\n      return NextResponse.json({ message: 'Пользователь с таким email уже существует.' }, { status: 409 });\n    }\n    const existingUserByUsername = await query('SELECT id FROM users WHERE username = ?', [username]);\n     if (Array.isArray(existingUserByUsername) && existingUserByUsername.length > 0) {\n      return NextResponse.json({ message: 'Пользователь с таким логином уже существует.' }, { status: 409 });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newReferralCode = `GH-${username.toUpperCase().slice(0,5)}${Date.now().toString().slice(-4)}`;\n    const userBalance = balance !== undefined ? parseFloat(balance) : 0.00;\n    const userReferralPercentage = referral_percentage !== undefined ? parseFloat(referral_percentage) : 5.00;\n\n    const result = await query(\n      'INSERT INTO users (username, email, password_hash, role, balance, referral_code, referral_percentage) VALUES (?, ?, ?, ?, ?, ?, ?)',\n      [username, email, hashedPassword, role, userBalance, newReferralCode, userReferralPercentage.toFixed(2)]\n    ) as OkPacket | ResultSetHeader | any[];\n\n    let insertId;\n    if (Array.isArray(result) && result.length > 0 && 'insertId' in result[0]) {\n        insertId = result[0].insertId;\n    } else if (result && 'insertId' in result) { \n        insertId = (result as OkPacket).insertId; \n    }\n\n    if (insertId) {\n      const newUser: Partial<User> = { \n          id: insertId, \n          username, \n          email, \n          role, \n          balance: userBalance, \n          referral_code: newReferralCode,\n          referral_percentage: userReferralPercentage \n        };\n      return NextResponse.json({ message: 'User created successfully', user: newUser }, { status: 201 });\n    } else {\n      console.error('User creation in DB failed, no insertId:', result);\n      return NextResponse.json({ message: 'Failed to create user in DB.' }, { status: 500 });\n    }\n\n  } catch (error: any) {\n    console.error('API Admin Users POST Error:', error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}