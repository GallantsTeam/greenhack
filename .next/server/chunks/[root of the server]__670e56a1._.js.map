{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mysql.ts"],"sourcesContent":["\n'use server'; // Add this directive\n\nimport mysql from 'mysql2/promise';\n\nconst connectionConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  connectionLimit: 10, // Optional: connection pool limit\n  namedPlaceholders: true, // Important for using object parameters\n  // Add SSL options if your Jino.ru MySQL requires it\n  // ssl: {\n  //   // ca: fs.readFileSync('/path/to/ca-cert.pem'), // if you have a CA cert\n  //   rejectUnauthorized: false // Be cautious with this in production, true is more secure\n  // }\n};\n\nlet pool: mysql.Pool | null = null;\n\nfunction getPool(): mysql.Pool {\n  if (!pool) {\n    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_NAME) { // Password can be empty for some local setups\n      console.error(\"Database environment variables DB_HOST, DB_USER, or DB_NAME are not set.\");\n      throw new Error(\"Database environment variables are not fully set. Please check your .env.local file.\");\n    }\n    try {\n      pool = mysql.createPool(connectionConfig);\n      console.log(\"MySQL connection pool created successfully.\");\n\n      // Test the pool by getting a connection (optional, but good for early feedback)\n      pool.getConnection()\n        .then(connection => {\n          console.log(\"Successfully connected to database via pool.\");\n          connection.release();\n        })\n        .catch(err => {\n          console.error(\"Failed to get a connection from pool on startup:\", err);\n          // Depending on severity, you might want to invalidate the pool or exit\n          // For now, we'll let further queries fail if the pool is truly unusable.\n        });\n\n    } catch (error) {\n      console.error(\"Failed to create MySQL connection pool:\", error);\n      // Ensure pool remains null if creation fails\n      pool = null;\n      throw new Error(\"Database connection pool could not be created.\");\n    }\n  }\n  return pool;\n}\n\nexport async function query(sql: string, params?: any[] | object): Promise<any> {\n  const currentPool = getPool(); // This will throw if pool cannot be initialized\n\n  let connection;\n  try {\n    connection = await currentPool.getConnection();\n    console.log(`Executing SQL: ${sql} with params: ${params ? JSON.stringify(params) : 'No params'}`);\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } catch (error: any) {\n    console.error('Database query error:', error.message, error.code, error.sqlMessage, error.sql);\n    throw new Error(`Database query failed: ${error.message}`);\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,iBAAiB;IACjB,mBAAmB;AAMrB;AAEA,IAAI,OAA0B;AAE9B,SAAS;IACP,IAAI,CAAC,MAAM;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;YACxE,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YACxB,QAAQ,GAAG,CAAC;YAEZ,gFAAgF;YAChF,KAAK,aAAa,GACf,IAAI,CAAC,CAAA;gBACJ,QAAQ,GAAG,CAAC;gBACZ,WAAW,OAAO;YACpB,GACC,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oDAAoD;YAClE,uEAAuE;YACvE,yEAAyE;YAC3E;QAEJ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,6CAA6C;YAC7C,OAAO;YACP,MAAM,IAAI,MAAM;QAClB;IACF;IACA,OAAO;AACT;AAEO,eAAe,uCAAG,GAAH,MAAM,GAAW,EAAE,MAAuB;IAC9D,MAAM,cAAc,WAAW,gDAAgD;IAE/E,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,YAAY,aAAa;QAC5C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,IAAI,cAAc,EAAE,SAAS,KAAK,SAAS,CAAC,UAAU,aAAa;QACjG,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,KAAK;QAChD,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO,EAAE,MAAM,IAAI,EAAE,MAAM,UAAU,EAAE,MAAM,GAAG;QAC7F,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,MAAM,OAAO,EAAE;IAC3D,SAAU;QACR,IAAI,YAAY;YACd,WAAW,OAAO;QACpB;IACF;AACF;;;IAjBsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/admin/site-navigation/%5BitemId%5D/route.ts"],"sourcesContent":["\n// src/app/api/admin/site-navigation/[itemId]/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { query } from '@/lib/mysql';\nimport type { SiteNavigationItem } from '@/types';\nimport type { OkPacket, ResultSetHeader } from 'mysql2';\n\n// GET single navigation item\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { itemId: string } }\n) {\n  const id = parseInt(params.itemId, 10);\n  if (isNaN(id)) {\n    return NextResponse.json({ message: 'Invalid item ID' }, { status: 400 });\n  }\n  try {\n    // TODO: Add admin authentication check\n    const results = await query('SELECT * FROM site_navigation_items WHERE id = ?', [id]);\n    if (!Array.isArray(results) || results.length === 0) {\n      return NextResponse.json({ message: 'Пункт меню не найден' }, { status: 404 });\n    }\n    const item: SiteNavigationItem = {\n        ...results[0],\n        is_visible: Boolean(results[0].is_visible),\n    };\n    return NextResponse.json(item);\n  } catch (error: any) {\n    console.error(`API Admin Site Navigation GET (ID: ${id}) Error:`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n\n// PUT update navigation item\nexport async function PUT(\n  request: NextRequest,\n  { params: routeParams }: { params: { itemId: string } }\n) {\n  const id = parseInt(routeParams.itemId, 10);\n  if (isNaN(id)) {\n    return NextResponse.json({ message: 'Invalid item ID' }, { status: 400 });\n  }\n\n  try {\n    // TODO: Add admin authentication check\n    const body = await request.json();\n    const { label, href, icon_name, item_order, is_visible } = body;\n\n    if (!label || !href) {\n      return NextResponse.json({ message: 'Label and Href are required.' }, { status: 400 });\n    }\n\n    const updateQuery = `\n      UPDATE site_navigation_items SET\n        label = ?, href = ?, icon_name = ?, item_order = ?, is_visible = ?, updated_at = NOW()\n      WHERE id = ?\n    `;\n    const queryParams = [\n      label,\n      href,\n      icon_name || null,\n      item_order !== undefined ? parseInt(item_order, 10) : 0,\n      is_visible === undefined ? true : Boolean(is_visible),\n      id,\n    ];\n\n    const result = await query(updateQuery, queryParams) as OkPacket | ResultSetHeader | any[];\n\n    let affectedRows = 0;\n    if (Array.isArray(result) && result.length > 0 && 'affectedRows' in result[0]) {\n        affectedRows = result[0].affectedRows;\n    } else if (result && 'affectedRows' in result) { \n        affectedRows = (result as OkPacket).affectedRows; \n    }\n\n    if (affectedRows > 0) {\n      const updatedItemResult = await query('SELECT * FROM site_navigation_items WHERE id = ?', [id]);\n       const updatedItem: SiteNavigationItem = {\n        ...updatedItemResult[0],\n        is_visible: Boolean(updatedItemResult[0].is_visible)\n      };\n      return NextResponse.json({ message: 'Пункт меню успешно обновлен', item: updatedItem }, { status: 200 });\n    } else {\n      return NextResponse.json({ message: 'Пункт меню не найден или данные не были изменены.' }, { status: 404 });\n    }\n  } catch (error: any) {\n    console.error(`API Admin Site Navigation PUT (ID: ${id}) Error:`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n\n// DELETE navigation item\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { itemId: string } }\n) {\n  const id = parseInt(params.itemId, 10);\n  if (isNaN(id)) {\n    return NextResponse.json({ message: 'Invalid item ID' }, { status: 400 });\n  }\n\n  try {\n    // TODO: Add admin authentication check\n    const result = await query('DELETE FROM site_navigation_items WHERE id = ?', [id]) as OkPacket | ResultSetHeader | any[];\n    \n    let affectedRows = 0;\n    if (Array.isArray(result) && result.length > 0 && 'affectedRows' in result[0]) {\n        affectedRows = result[0].affectedRows;\n    } else if (result && 'affectedRows' in result) {\n        affectedRows = (result as OkPacket).affectedRows;\n    }\n\n    if (affectedRows > 0) {\n      return NextResponse.json({ message: 'Пункт меню успешно удален' }, { status: 200 });\n    } else {\n      return NextResponse.json({ message: 'Пункт меню не найден или уже был удален.' }, { status: 404 });\n    }\n  } catch (error: any) {\n    console.error(`API Admin Site Navigation DELETE (ID: ${id}) Error:`, error);\n    return NextResponse.json({ message: `Internal Server Error: ${error.message}` }, { status: 500 });\n  }\n}\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}